{"version":3,"sources":["../src/api.js"],"names":["API","host","port","resolve","reject","status","socket","dgram","createSocket","datagram","send","err","on","message","remote","unicodeValues","toJSON","data","unicodeString","String","fromCharCode","close","error","collection","db","ref","once","snapshot","id","payload","set","getCopyOfDB","cache","console","log","e","msg","remove"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;IAMqBA,G;;;;;;;wCACQC,I,EAAMC,I,EAAM;AACrC,aAAO,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAI;AACF,cAAIC,SAAS,EAAb;AACA,cAAMC,SAASC,gBAAMC,YAAN,CAAmB,MAAnB,CAAf;AACA,cAAMC,WAAW,wBAAjB;;AAEAH,iBAAOI,IAAP,CAAYD,QAAZ,EAAsBP,IAAtB,EAA4BD,IAA5B,EAAkC,eAAO;AACvC,gBAAIU,GAAJ,EAASP,OAAOO,GAAP;AACV,WAFD;;AAIAL,iBAAOM,EAAP,CAAU,SAAV,EAAqB,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACxC,gBAAMC,gBAAgBF,QAAQG,MAAR,GAAiBC,IAAvC;AACA,gBAAMC,gBAAgBC,OAAOC,YAAP,gDAAuBL,aAAvB,EAAtB;AACAV,sBAAUa,aAAV;AACA,gBAAI,iCAAmBA,aAAnB,CAAJ,EAAuC;AACrCf,sBAAQE,MAAR;AACA,qBAAOC,OAAOe,KAAP,EAAP;AACD;AACF,WARD;AASD,SAlBD,CAkBE,OAAOC,KAAP,EAAc;AACdlB,iBAAOkB,KAAP;AACD;AACF,OAtBM,CAAP;AAuBD;;;;2GAEwBC,U;;;;;;;uBACAC,aAAGC,GAAH,MAAUF,UAAV,EAAwBG,IAAxB,CAA6B,OAA7B,C;;;AAAjBC,wB;iDACC,sCAAwBA,QAAxB,C;;;;;;;;;;;;;;;;;;;6GAGaJ,U,EAAYK,E,EAAIC,O;;;;;;;;uBAE5BL,aAAGC,GAAH,CAAUF,UAAV,SAAwBK,EAAxB,EAA8BE,GAA9B,CAAkCD,OAAlC,C;;;;uBACc7B,IAAI+B,WAAJ,CAAgBR,UAAhB,C;;;AAAdS,qB;kDACC,EAAE3B,QAAQ,IAAV,EAAgB2B,YAAhB,E;;;;;;AAEPC,wBAAQC,GAAR,CAAY,iBAAZ,EAA+BC,CAA/B;kDACO,EAAE9B,QAAQ,KAAV,EAAiB+B,KAAK,sBAAtB,E;;;;;;;;;;;;;;;;;;;6GAIeb,U,EAAYK,E;;;;;;;;uBAE5BJ,aAAGC,GAAH,CAAUF,UAAV,SAAwBK,EAAxB,EAA8BS,MAA9B,E;;;;uBACcrC,IAAI+B,WAAJ,CAAgBR,UAAhB,C;;;AAAdS,qB;kDACC,EAAE3B,QAAQ,IAAV,EAAgB2B,YAAhB,E;;;;;;AAEPC,wBAAQC,GAAR,CAAY,qBAAZ,EAAmCC,CAAnC;kDACO,EAAE9B,QAAQ,KAAV,EAAiB+B,KAAK,sBAAtB,E;;;;;;;;;;;;;;;;;;;;kBAlDQpC,G","file":"api.js","sourcesContent":["import dgram from 'dgram';\r\nimport db from './db';\r\nimport {\r\n  checkIfFinalPacket,\r\n  createSortedDBSnapshot,\r\n  createCacheFromSnapshot,\r\n} from './helpers';\r\n\r\nexport default class API {\r\n  static getUT99ServerStatus(host, port) {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        let status = '';\r\n        const socket = dgram.createSocket('udp4');\r\n        const datagram = '\\\\status\\\\XServerQuery';\r\n\r\n        socket.send(datagram, port, host, err => {\r\n          if (err) reject(err);\r\n        });\r\n\r\n        socket.on('message', (message, remote) => {\r\n          const unicodeValues = message.toJSON().data;\r\n          const unicodeString = String.fromCharCode(...unicodeValues);\r\n          status += unicodeString;\r\n          if (checkIfFinalPacket(unicodeString)) {\r\n            resolve(status);\r\n            return socket.close();\r\n          }\r\n        });\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  static async getCopyOfDB(collection) {\r\n    const snapshot = await db.ref(`${collection}`).once('value');\r\n    return createCacheFromSnapshot(snapshot);\r\n  }\r\n\r\n  static async pushToDB(collection, id, payload) {\r\n    try {\r\n      await db.ref(`${collection}/${id}`).set(payload);\r\n      const cache = await API.getCopyOfDB(collection);\r\n      return { status: true, cache };\r\n    } catch (error) {\r\n      console.log('pushToDB Error ', e);\r\n      return { status: false, msg: 'Something went wrong' };\r\n    }\r\n  }\r\n\r\n  static async deleteFromDB(collection, id) {\r\n    try {\r\n      await db.ref(`${collection}/${id}`).remove();\r\n      const cache = await API.getCopyOfDB(collection);\r\n      return { status: true, cache };\r\n    } catch (error) {\r\n      console.log('deleteFromDB Error ', e);\r\n      return { status: false, msg: 'Something went wrong' };\r\n    }\r\n  }\r\n}\r\n"]}