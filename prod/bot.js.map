{"version":3,"sources":["../src/bot.js"],"names":["message","author","equals","bot","user","content","startsWith","prefix","cachedDB","Servers","serversObj","Pugs","id","username","isUserMentioned","mentions","users","first","userMentioned","roles","member","args","substring","length","split","filter","Boolean","action","toLowerCase","hasAdminCmd","commands","admincmds","includes","isValidAdminCmd","setchannel","servers","addqueryserver","delqueryserver","queryut99server","addgametype","delgametype","joingametype","leavegametype","listgametype","pickplayer","captain","channelId","channel","result","status","updateCache","cache","send","msg","catch","console","error","slice","PugList","filledPugs","reduce","acc","pug","discriminator","revisePugList","list","parseInt","noPlayers","push","forBroadcast","map","picking","allLeaveMsgs","op","allPugLeaveMsgs","prev","deadPugs","pickedPlayers","captainsReady","pugEventEmitter","emit","pugEvents","log","onMessage","dotenv","config","disabledEvents","Client","on","_","channels","guild","presence","some","p","u","Channel","get","preferredChannel","channeluser","User","Message","attachments","embeds","API","getCopyOfDB","login","process","env","DISCORD_BOT_TOKEN","toUpdate","newCache"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;uFAoFA,iBAAyBA,OAAzB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,iBACMA,QAAQC,MAAR,CAAeC,MAAf,CAAsBC,IAAIC,IAA1B,CADN;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,gBAEOJ,QAAQK,OAAR,CAAgBC,UAAhB,CAA2BC,iBAA3B,CAFP;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,yBAIkDC,QAJlD,kCAIUC,OAJV,EAImBC,UAJnB,sCAIgC,EAJhC,oDAIoCC,IAJpC,EAIoCA,IAJpC,mCAI2C,EAJ3C;AAMQP,gBANR,GAMe;AACXQ,kBAAIZ,QAAQC,MAAR,CAAeW,EADR;AAEXC,wBAAU,yCAA2Bb,QAAQC,MAAR,CAAeY,QAA1C;AAFC,aANf;AAWQC,2BAXR,GAW0Bd,QAAQe,QAAR,CAAiBC,KAAjB,CAAuBC,KAAvB,EAX1B;AAYQC,yBAZR,GAYwB;AACpBN,kBAAIE,mBAAmBA,gBAAgBF,EADnB;AAEpBC,wBACEC,mBAAmB,yCAA2BA,gBAAgBD,QAA3C;AAHD,aAZxB;AAkBQM,iBAlBR,GAkBgBnB,QAAQoB,MAAR,CAAeD,KAlB/B;AAmBQE,gBAnBR,GAmBerB,QAAQK,OAAR,CACViB,SADU,CACAf,kBAAOgB,MADP,EAEVC,KAFU,CAEJ,GAFI,EAGVC,MAHU,CAGHC,OAHG,CAnBf;AAuBQC,kBAvBR,GAuBiBN,KAAK,CAAL,EAAQO,WAAR,EAvBjB;AAyBQC,uBAzBR,GAyBsBC,oBAASC,SAAT,CAAmBC,QAAnB,CAA4BL,MAA5B,CAzBtB;AA0BQM,2BA1BR,GA0B0BJ,eAAe,sCAAwBV,KAAxB,CA1BzC;AAAA,0BA4BU,IA5BV;AAAA,6CA6BS,sCAAwBA,KAAxB,KACHW,oBAASI,UAAT,CAAoBF,QAApB,CAA6BL,MAA7B,CA9BN,yBAsCSG,oBAASK,OAAT,CAAiBH,QAAjB,CAA0BL,MAA1B,CAtCT,yBA8CS,sCAAwBR,KAAxB,KACHW,oBAASM,cAAT,CAAwBJ,QAAxB,CAAiCL,MAAjC,CA/CN,0BAuDS,sCAAwBR,KAAxB,KACHW,oBAASO,cAAT,CAAwBL,QAAxB,CAAiCL,MAAjC,CAxDN,yBAgESG,oBAASQ,eAAT,CAAyBN,QAAzB,CAAkCL,MAAlC,CAhET,wBAyESG,oBAASS,WAAT,CAAqBP,QAArB,CAA8BL,MAA9B,CAzET,wBAgFSG,oBAASU,WAAT,CAAqBR,QAArB,CAA8BL,MAA9B,CAhFT,wBAuFSG,oBAASW,YAAT,CAAsBT,QAAtB,CAA+BL,MAA/B,CAvFT,wBAiJSG,oBAASY,aAAT,CAAuBV,QAAvB,CAAgCL,MAAhC,CAjJT,wBAyKSG,oBAASa,YAAT,CAAsBX,QAAtB,CAA+BL,MAA/B,CAzKT,wBAiLSG,oBAASc,UAAT,CAAoBZ,QAApB,CAA6BL,MAA7B,CAjLT,wBA2MSG,oBAASe,OAAT,CAAiBb,QAAjB,CAA0BL,MAA1B,CA3MT;AAAA;;AAAA;AA+BYmB,qBA/BZ,GA+BwB9C,QAAQ+C,OAAR,CAAgBnC,EA/BxC;AAAA;AAAA,mBAgC2B,oCAAoBkC,SAApB,CAhC3B;;AAAA;AAgCYE,kBAhCZ;;AAiCMA,mBAAOC,MAAP,GAAgBC,YAAY,SAAZ,EAAuBF,OAAOG,KAA9B,CAAhB,GAAuD,EAAvD;AACAnD,oBAAQ+C,OAAR,CAAgBK,IAAhB,CAAqBJ,OAAOK,GAA5B;AAlCN;;AAAA;AAuCY5C,mBAvCZ,GAuCsB,uCAA4BC,UAA5B,EAAwC,WAAxC,CAvCtB;;AAwCMV,oBAAQ+C,OAAR,CACGK,IADH,CACQ,8BAAgB3C,OAAhB,CADR,EAEG6C,KAFH,CAESC,QAAQC,KAAR,GAAgB,QAFzB;AAxCN;;AAAA;AAgDY/C,oBAhDZ,GAgDsB,uCAA4BC,UAA5B,CAhDtB;AAAA;AAAA,mBAiD2B,+BAAeW,IAAf,EAAqBZ,QAArB,CAjD3B;;AAAA;AAiDYuC,mBAjDZ;;AAkDMA,oBAAOC,MAAP,GAAgBC,YAAY,SAAZ,EAAuBF,QAAOG,KAA9B,CAAhB,GAAuD,EAAvD;AACAnD,oBAAQ+C,OAAR,CAAgBK,IAAhB,CAAqBJ,QAAOK,GAA5B;AAnDN;;AAAA;AAyDY5C,qBAzDZ,GAyDsB,uCAA4BC,UAA5B,CAzDtB;AAAA;AAAA,mBA0D2B,+BAAeW,IAAf,EAAqBZ,SAArB,CA1D3B;;AAAA;AA0DYuC,oBA1DZ;;AA2DMA,qBAAOC,MAAP,GAAgBC,YAAY,SAAZ,EAAuBF,SAAOG,KAA9B,CAAhB,GAAuD,EAAvD;AACAnD,oBAAQ+C,OAAR,CAAgBK,IAAhB,CAAqBJ,SAAOK,GAA5B;AA5DN;;AAAA;AAiEY5C,qBAjEZ,GAiEsB,uCAA4BC,UAA5B,EAAwC,WAAxC,CAjEtB;AAAA;AAAA,mBAkE2B,gCAAgBW,KAAK,CAAL,CAAhB,EAAyBZ,SAAzB,CAlE3B;;AAAA;AAkEYuC,oBAlEZ;;AAmEMhD,oBAAQ+C,OAAR,CACGK,IADH,CACQJ,SAAOC,MAAP,GAAgB,gCAAkBD,QAAlB,CAAhB,GAA4CA,SAAOK,GAD3D,EAEGC,KAFH,CAESC,QAAQC,KAAR,GAAgB,SAFzB;AAnEN;;AAAA;AAAA;AAAA,mBA0E2B,sBAAYnC,IAAZ,EAAkBV,IAAlB,CA1E3B;;AAAA;AA0EYqC,oBA1EZ;;AA2EMA,qBAAOC,MAAP,GAAgBC,YAAY,MAAZ,EAAoBF,SAAOG,KAA3B,CAAhB,GAAoD,EAApD;AACAnD,oBAAQ+C,OAAR,CAAgBK,IAAhB,CAAqBJ,SAAOK,GAA5B;AA5EN;;AAAA;AAAA;AAAA,mBAiF2B,sBAAYhC,IAAZ,EAAkBV,IAAlB,CAjF3B;;AAAA;AAiFYqC,oBAjFZ;;AAkFMA,qBAAOC,MAAP,GAAgBC,YAAY,MAAZ,EAAoBF,SAAOG,KAA3B,CAAhB,GAAoD,EAApD;AACAnD,oBAAQ+C,OAAR,CAAgBK,IAAhB,CAAqBJ,SAAOK,GAA5B;AAnFN;;AAAA;AAAA,kBAwFUxB,eAAe,CAACI,eAxF1B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,4BA0FsC,uBAC9BA,kBAAkBZ,KAAKoC,KAAL,CAAW,CAAX,CAAlB,GAAkCpC,IADJ,EAE9BY,kBAAkBf,aAAlB,GAAkCd,IAFJ,EAG9BO,IAH8B,EAI9B+C,OAJ8B,CA1FtC,EA0FcT,MA1Fd,iBA0FcA,MA1Fd,EA0FsBD,QA1FtB,iBA0FsBA,MA1FtB,EA0F8BK,GA1F9B,iBA0F8BA,GA1F9B;AAgGYM,sBAhGZ,GAgGyBX,SAAOY,MAAP,CAAc,UAACC,GAAD,SAAiC;AAAA,kBAAzBC,GAAyB,SAAzBA,GAAyB;AAAA,kBAApBC,aAAoB,SAApBA,aAAoB;;AAChE,kBAAID,GAAJ,EAAS;AACPE,8BAAcD,aAAd,EAA6BD,GAA7B,EAAkC,QAAlC;AACAA,oBAAIG,IAAJ,CAAS1C,MAAT,KAAoB2C,SAASJ,IAAIK,SAAb,CAApB,GAA8CN,IAAIO,IAAJ,CAASN,GAAT,CAA9C,GAA8D,IAA9D;AACD;AACD,qBAAOD,GAAP;AACD,aANkB,EAMhB,EANgB,CAhGzB;;AAuGM7D,oBAAQ+C,OAAR,CACGK,IADH,CACQH,SAAS,iCAAmBD,QAAnB,CAAT,GAAsCK,GAD9C,EAEGC,KAFH,CAESC,QAAQC,KAAR,GAAgB,QAFzB;;AAIMa,wBA3GZ,GA2G2BV,WAAWW,GAAX,CAAe,eAAO;AACzC,kBAAIZ,QAAQI,IAAIC,aAAZ,EAA2BQ,OAA/B,EAAwC;AACtC,oBAAMC,eAAe,sBAAcd,OAAd,EAAuBE,MAAvB,CAA8B,UAACC,GAAD,EAAMY,EAAN,EAAa;AAC9D,sBAAIX,IAAIC,aAAJ,KAAsBU,GAAGV,aAA7B,EAA4C;AAC1C,wBAAMW,kBAAkBZ,IAAIG,IAAJ,CAASL,MAAT,CAAgB,UAACe,IAAD,EAAOvE,IAAP,EAAgB;AAAA,2CACnC,wBACjB,CAAC,GAAD,EAAMqE,GAAGV,aAAT,CADiB,EAEjB3D,IAFiB,EAGjBO,IAHiB,EAIjB+C,OAJiB,CADmC;AAAA,0BAC9CV,MAD8C,kBAC9CA,MAD8C;;AAOtD,0BAAIA,OAAO,CAAP,EAAUc,GAAd,EAAmB;AACjBE,sCACES,GAAGV,aADL,EAEEf,OAAO,CAAP,EAAUc,GAFZ,EAGEd,OAAO,CAAP,EAAUc,GAAV,CAAcG,IAAd,CAAmB1C,MAAnB,KAA8B,CAA9B,GAAkC,QAAlC,GAA6C,QAH/C;AAKA,4BAAM8B,OAAM,kCAAoBL,MAApB,CAAZ;AACA2B,gCAAWtB,IAAX;AACD;AACD,6BAAOsB,IAAP;AACD,qBAjBuB,KAAxB;AAkBAd,2BAAUa,eAAV;AACD;AACD,yBAAOb,GAAP;AACD,iBAvBoB,KAArB;AAwBAW,gCAAgBxE,QAAQ+C,OAAR,CAAgBK,IAAhB,CAAqBoB,YAArB,CAAhB;AACA,uBAAOV,GAAP;AACD;AACF,aA7BoB,CA3G3B;;AAyIMO,yBAAa9C,MAAb,GAAsB,CAAtB,GACIvB,QAAQ+C,OAAR,CAAgBK,IAAhB,CACE,kCAAoBiB,aAAa5C,MAAb,CAAoBC,OAApB,CAApB,CADF,CADJ,GAII,IAJJ;AAzIN;;AAAA;AAAA,8BAkJsC,wBAAcL,IAAd,EAAoBjB,IAApB,EAA0BO,IAA1B,EAAgC+C,OAAhC,CAlJtC,EAkJcT,OAlJd,mBAkJcA,MAlJd,EAkJsBD,QAlJtB,mBAkJsBA,MAlJtB,EAkJ8BK,KAlJ9B,mBAkJ8BA,GAlJ9B;AAmJYuB,oBAnJZ,GAmJuB5B,SAAOY,MAAP,CAAc,UAACC,GAAD,SAAiC;AAAA,kBAAzBC,GAAyB,SAAzBA,GAAyB;AAAA,kBAApBC,aAAoB,SAApBA,aAAoB;;AAC9D,kBAAID,GAAJ,EAAS;AACPE,8BACED,aADF,EAEED,GAFF,EAGEA,IAAIG,IAAJ,CAAS1C,MAAT,KAAoB,CAApB,GAAwB,QAAxB,GAAmC,QAHrC;AAKAuC,oBAAIG,IAAJ,CAAS1C,MAAT,KAAoB2C,SAASJ,IAAIK,SAAb,IAA0B,CAA9C,GACIN,IAAIO,IAAJ,4BAAcN,GAAd,IAAmB1D,UAAnB,IADJ,GAEI,IAFJ;AAGD;AACD,qBAAOyD,GAAP;AACD,aAZgB,EAYd,EAZc,CAnJvB;;AAgKM7D,oBAAQ+C,OAAR,CACGK,IADH,CACQH,UAAS,kCAAoBD,QAApB,CAAT,GAAuCK,KAD/C,EAEGC,KAFH,CAESC,QAAQC,KAAR,GAAgB,SAFzB;AAGAoB,qBAASrD,MAAT,GAAkB,CAAlB,GACIvB,QAAQ+C,OAAR,CAAgBK,IAAhB,CAAqB,gCAAkBwB,QAAlB,CAArB,CADJ,GAEI,IAFJ;AAnKN;;AAAA;AAAA,iCA0KsC,4BAAkBvD,IAAlB,EAAwBqC,OAAxB,CA1KtC,EA0KcT,QA1Kd,sBA0KcA,MA1Kd,EA0KsBD,QA1KtB,sBA0KsBA,MA1KtB,EA0K8BK,KA1K9B,sBA0K8BA,GA1K9B;;AA2KMrD,oBAAQ+C,OAAR,CACGK,IADH,CACQH,WAAS,+BAAiBD,QAAjB,CAAT,GAAoCK,KAD5C,EAEGC,KAFH,CAESC,QAAQC,KAAR,GAAgB,QAFzB;AA3KN;;AAAA;AAAA,kBAkLU3B,eAAe,CAACI,eAlL1B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,6BAoLsC,wBAC9BA,kBAAkBZ,KAAKoC,KAAL,CAAW,CAAX,CAAlB,GAAkCpC,IADJ,EAE9BY,kBAAkBf,aAAlB,GAAkCd,IAFJ,EAG9BsD,OAH8B,CApLtC,EAoLcT,QApLd,kBAoLcA,MApLd,EAoLsBD,QApLtB,kBAoLsBA,MApLtB,EAoL8BK,KApL9B,kBAoL8BA,GApL9B;;;AA0LMJ,uBACIe,cACEhB,SAAOc,GAAP,CAAWC,aADb,EAEEf,SAAOc,GAFT,EAGE,CAACd,SAAOuB,OAAR,GAAkB,QAAlB,GAA6B,QAH/B,CADJ,GAMI,IANJ;AAOAvE,oBAAQ+C,OAAR,CACGK,IADH,CAEIH,WACI,8BAAgBD,QAAhB,CADJ,GAEIK,gBAAYL,SAAO6B,aAAP,CAAqBhE,QAAjC,yBAJR,EAMGyC,KANH,CAMSC,QAAQC,KAAR,GAAgB,QANzB;AAjMN;;AAAA;AAAA,0BA4MsC,qBAAWpD,IAAX,EAAiBsD,OAAjB,CA5MtC,EA4McT,QA5Md,eA4McA,MA5Md,EA4MsBD,SA5MtB,eA4MsBA,MA5MtB,EA4M8BK,KA5M9B,eA4M8BA,GA5M9B;;AA6MMJ,uBACIe,cAAchB,UAAOc,GAAP,CAAWC,aAAzB,EAAwCf,UAAOc,GAA/C,EAAoD,QAApD,CADJ,GAEI,IAFJ;AA7MN;AAAA,mBAgNY9D,QAAQ+C,OAAR,CACHK,IADG,CACEH,WAAS,oCAAsB7C,IAAtB,EAA4B4C,SAA5B,CAAT,GAA+CK,KADjD,EAEHC,KAFG,CAEGC,QAAQC,KAAR,GAAgB,QAFnB,CAhNZ;;AAAA;;AAoNMP,wBAAUD,UAAO8B,aAAjB,GACIC,mBAAgBC,IAAhB,CACEC,qBAAUH,aADZ,EAEE9B,UAAOc,GAAP,CAAWC,aAFb,CADJ,GAKI,IALJ;AApNN;;AAAA;AA8NMR,oBAAQ2B,GAAR,CAAY,UAAZ;;AA9NN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,S;;;;;AAkOf;;;;;;;AAtTA;;AACA;;;;AACA;;;;AACA;;AACA;;AAMA;;AASA;;AAYA;;AACA;;AACA;;;;;;AAEAC,iBAAOC,MAAP;;AAEA;;;;;AAKA,IAAI7E,WAAW,EAAf;AACA,IAAIkD,UAAU,EAAd;;AAEA,IAAM4B,iBAAiB,CAAC,cAAD,EAAiB,gBAAjB,EAAmC,aAAnC,CAAvB;AACA,IAAMnF,MAAM,IAAIoF,eAAJ,CAAW,EAAED,8BAAF,EAAX,CAAZ;;AAEAnF,IAAIqF,EAAJ,CAAO,OAAP,EAAgB,YAAM;AACpBjC,UAAQ2B,GAAR,CAAY,OAAZ;AACD,CAFD;;AAIA/E,IAAIqF,EAAJ,CACE,gBADF,EAEE,UAACC,CAAD,QAA4D;AAAA,MAAtDrF,IAAsD,QAAtDA,IAAsD;AAAA,MAAvCsF,QAAuC,QAAhDC,KAAgD,CAAvCD,QAAuC;AAAA,MAAfzC,MAAe,QAA3B2C,QAA2B,CAAf3C,MAAe;;AAC1D,MAAIA,WAAW,SAAf,EAA0B;AACxB,QACE,sBAAcS,OAAd,EAAuBmC,IAAvB,CAA4B;AAAA,aAAKC,EAAE7B,IAAF,CAAO4B,IAAP,CAAY;AAAA,eAAKE,EAAEnF,EAAF,KAASR,KAAKQ,EAAnB;AAAA,OAAZ,CAAL;AAAA,KAA5B,CADF,EAEE;AAAA,sBACyBJ,QADzB;AAAA,wCACQwF,OADR;AAAA,UACQA,OADR,qCACkB,EADlB;;AAEA,UAAMjD,UAAU2C,SAASO,GAAT,CAAaD,QAAQE,gBAArB,CAAhB;AACA,UAAMC,cAAc,IAAIC,aAAJ,CAASjG,GAAT,EAAc;AAChCA,aAAK,KAD2B;AAEhCS,YAAIR,KAAKQ,EAFuB;AAGhCC,kBAAUT,KAAKS;AAHiB,OAAd,CAApB;AAKA,UAAMb,UAAU,IAAIqG,gBAAJ,CACdtD,OADc,EAEd;AACE9C,gBAAQkG,WADV;AAEEG,qBAAa,mBAFf;AAGEC,gBAAQ,EAHV;AAIElG,iBAAYE,iBAAZ;AAJF,OAFc,EAQdJ,GARc,CAAhB;AAUAgF,gBAAUnF,OAAV;AACD;AACF;AACF,CA3BH;;AA8BAG,IAAIqF,EAAJ,CAAO,SAAP,EAAkBL,SAAlB;;AA2OA,yEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACkBqB,cAAIC,WAAJ,KADlB;;AAAA;AACCjG,kBADD;;AAECL,cAAIuG,KAAJ,CAAUC,QAAQC,GAAR,CAAYC,iBAAtB;;AAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD;;AAKA,IAAM3D,cAAc,SAAdA,WAAc,CAAC4D,QAAD,EAAWC,QAAX;AAAA,SAAyBvG,SAASsG,QAAT,IAAqBC,QAA9C;AAAA,CAApB;AACA,IAAM/C,gBAAgB,SAAhBA,aAAgB,CAACD,aAAD,EAAgBD,GAAhB,EAAqBnC,MAArB,EAAgC;AACpD,MAAIA,WAAW,QAAf,EAAyB+B,QAAQK,aAAR,IAAyBD,GAAzB,CAAzB,KACK,IAAInC,WAAW,QAAX,IAAuB+B,QAAQK,aAAR,CAA3B,EACH,OAAOL,QAAQK,aAAR,CAAP;AACH,CAJD;;AAMA;;;;AAIAgB,mBAAgBS,EAAhB,CAAmBP,qBAAUH,aAA7B,EAA4C,yBAAiB;AAAA,mBAClCtE,QADkC;AAAA,sCACnDwF,OADmD;AAAA,MACnDA,OADmD,sCACzC,EADyC;;AAE3D,MAAMlC,MAAMJ,QAAQK,aAAR,CAAZ;AACA5D,MAAIuF,QAAJ,CACGO,GADH,CACOD,QAAQE,gBADf,EAEG9C,IAFH,CAEQ,qCAAuBU,GAAvB,CAFR,EAGGR,KAHH,CAGSC,QAAQC,KAAR,GAAgB,qBAHzB;AAID,CAPD","file":"bot.js","sourcesContent":["import { Client, Presence, Message, TextChannel, User } from 'discord.js';\nimport dotenv from 'dotenv';\nimport pugEventEmitter from './pugEvent';\nimport { prefix, commands, pugEvents } from './constants';\nimport {\n  addQueryServer,\n  queryUT99Server,\n  delQueryServer,\n  setPreferredChannel,\n} from './ut99query';\nimport {\n  addGameType,\n  delGameType,\n  joinGameType,\n  leaveGameType,\n  listAvailablePugs,\n  pickPugPlayer,\n  addCaptain,\n} from './pug';\nimport {\n  printServerStatus,\n  printServerList,\n  printPugJoinStatus,\n  printPugLeaveStatus,\n  printPugStatuses,\n  broadCastFilledPugs,\n  broadCastDeadPugs,\n  broadCastCaptainsReady,\n  printPickStatus,\n  printAddCaptainStatus,\n} from './formats';\nimport { checkIfRoleIsPrivileged, fixSpecialCharactersInName } from './helpers';\nimport { createSortedArrayFromObject } from './util';\nimport API from './api';\n\ndotenv.config();\n\n/**\n * PugList is list of pugs active at any moment on the server\n * Pugs are the pug(s)/gametype(s) registered on the server with their props\n */\n\nlet cachedDB = {};\nlet PugList = {};\n\nconst disabledEvents = ['TYPING_START', 'CHANNEL_UPDATE', 'USER_UPDATE'];\nconst bot = new Client({ disabledEvents });\n\nbot.on('ready', () => {\n  console.log('ready');\n});\n\nbot.on(\n  'presenceUpdate',\n  (_, { user, guild: { channels }, presence: { status } }) => {\n    if (status === 'offline') {\n      if (\n        Object.values(PugList).some(p => p.list.some(u => u.id === user.id))\n      ) {\n        const { Channel = {} } = cachedDB;\n        const channel = channels.get(Channel.preferredChannel);\n        const channeluser = new User(bot, {\n          bot: false,\n          id: user.id,\n          username: user.username,\n        });\n        const message = new Message(\n          channel,\n          {\n            author: channeluser,\n            attachments: new Map(),\n            embeds: [],\n            content: `${prefix}lva`,\n          },\n          bot\n        );\n        onMessage(message);\n      }\n    }\n  }\n);\n\nbot.on('message', onMessage);\n\nasync function onMessage(message) {\n  if (message.author.equals(bot.user)) return;\n  if (!message.content.startsWith(prefix)) return;\n\n  const { Servers: serversObj = {}, Pugs = {} } = cachedDB;\n\n  const user = {\n    id: message.author.id,\n    username: fixSpecialCharactersInName(message.author.username),\n  };\n\n  const isUserMentioned = message.mentions.users.first();\n  const userMentioned = {\n    id: isUserMentioned && isUserMentioned.id,\n    username:\n      isUserMentioned && fixSpecialCharactersInName(isUserMentioned.username),\n  };\n\n  const roles = message.member.roles;\n  const args = message.content\n    .substring(prefix.length)\n    .split(' ')\n    .filter(Boolean);\n  const action = args[0].toLowerCase();\n\n  const hasAdminCmd = commands.admincmds.includes(action);\n  const isValidAdminCmd = hasAdminCmd && checkIfRoleIsPrivileged(roles);\n\n  switch (true) {\n    case checkIfRoleIsPrivileged(roles) &&\n      commands.setchannel.includes(action): {\n      const channelId = message.channel.id;\n      const result = await setPreferredChannel(channelId);\n      result.status ? updateCache('Channel', result.cache) : '';\n      message.channel.send(result.msg);\n      break;\n    }\n\n    case commands.servers.includes(action): {\n      const Servers = createSortedArrayFromObject(serversObj, 'timestamp');\n      message.channel\n        .send(printServerList(Servers))\n        .catch(console.error + ':list:');\n      break;\n    }\n\n    case checkIfRoleIsPrivileged(roles) &&\n      commands.addqueryserver.includes(action): {\n      const Servers = createSortedArrayFromObject(serversObj);\n      const result = await addQueryServer(args, Servers);\n      result.status ? updateCache('Servers', result.cache) : '';\n      message.channel.send(result.msg);\n      break;\n    }\n\n    case checkIfRoleIsPrivileged(roles) &&\n      commands.delqueryserver.includes(action): {\n      const Servers = createSortedArrayFromObject(serversObj);\n      const result = await delQueryServer(args, Servers);\n      result.status ? updateCache('Servers', result.cache) : '';\n      message.channel.send(result.msg);\n      break;\n    }\n\n    case commands.queryut99server.includes(action): {\n      const Servers = createSortedArrayFromObject(serversObj, 'timestamp');\n      const result = await queryUT99Server(args[1], Servers);\n      message.channel\n        .send(result.status ? printServerStatus(result) : result.msg)\n        .catch(console.error + ':query:');\n      break;\n    }\n\n    case commands.addgametype.includes(action): {\n      const result = await addGameType(args, Pugs);\n      result.status ? updateCache('Pugs', result.cache) : '';\n      message.channel.send(result.msg);\n      break;\n    }\n\n    case commands.delgametype.includes(action): {\n      const result = await delGameType(args, Pugs);\n      result.status ? updateCache('Pugs', result.cache) : '';\n      message.channel.send(result.msg);\n      break;\n    }\n\n    case commands.joingametype.includes(action): {\n      if (hasAdminCmd && !isValidAdminCmd) break;\n\n      const { status, result, msg } = joinGameType(\n        isValidAdminCmd ? args.slice(1) : args,\n        isValidAdminCmd ? userMentioned : user,\n        Pugs,\n        PugList\n      );\n      const filledPugs = result.reduce((acc, { pug, discriminator }) => {\n        if (pug) {\n          revisePugList(discriminator, pug, 'update');\n          pug.list.length === parseInt(pug.noPlayers) ? acc.push(pug) : null;\n        }\n        return acc;\n      }, []);\n      message.channel\n        .send(status ? printPugJoinStatus(result) : msg)\n        .catch(console.error + ':join:');\n\n      const forBroadcast = filledPugs.map(pug => {\n        if (PugList[pug.discriminator].picking) {\n          const allLeaveMsgs = Object.values(PugList).reduce((acc, op) => {\n            if (pug.discriminator !== op.discriminator) {\n              const allPugLeaveMsgs = pug.list.reduce((prev, user) => {\n                const { result } = leaveGameType(\n                  ['l', op.discriminator],\n                  user,\n                  Pugs,\n                  PugList\n                );\n                if (result[0].pug) {\n                  revisePugList(\n                    op.discriminator,\n                    result[0].pug,\n                    result[0].pug.list.length === 0 ? 'remove' : 'update'\n                  );\n                  const msg = printPugLeaveStatus(result);\n                  prev += `${msg} `;\n                }\n                return prev;\n              }, ``);\n              acc += `${allPugLeaveMsgs} \\n`;\n            }\n            return acc;\n          }, ``);\n          allLeaveMsgs && message.channel.send(allLeaveMsgs);\n          return pug;\n        }\n      });\n      forBroadcast.length > 0\n        ? message.channel.send(\n            broadCastFilledPugs(forBroadcast.filter(Boolean))\n          )\n        : null;\n      break;\n    }\n\n    case commands.leavegametype.includes(action): {\n      const { status, result, msg } = leaveGameType(args, user, Pugs, PugList);\n      const deadPugs = result.reduce((acc, { pug, discriminator }) => {\n        if (pug) {\n          revisePugList(\n            discriminator,\n            pug,\n            pug.list.length === 0 ? 'remove' : 'update'\n          );\n          pug.list.length === parseInt(pug.noPlayers) - 1\n            ? acc.push({ ...pug, user })\n            : null;\n        }\n        return acc;\n      }, []);\n      message.channel\n        .send(status ? printPugLeaveStatus(result) : msg)\n        .catch(console.error + ':leave:');\n      deadPugs.length > 0\n        ? message.channel.send(broadCastDeadPugs(deadPugs))\n        : null;\n      break;\n    }\n\n    case commands.listgametype.includes(action): {\n      const { status, result, msg } = listAvailablePugs(args, PugList);\n      message.channel\n        .send(status ? printPugStatuses(result) : msg)\n        .catch(console.error + ':list:');\n      break;\n    }\n\n    case commands.pickplayer.includes(action): {\n      if (hasAdminCmd && !isValidAdminCmd) break;\n\n      const { status, result, msg } = pickPugPlayer(\n        isValidAdminCmd ? args.slice(1) : args,\n        isValidAdminCmd ? userMentioned : user,\n        PugList\n      );\n\n      status\n        ? revisePugList(\n            result.pug.discriminator,\n            result.pug,\n            !result.picking ? 'remove' : 'update'\n          )\n        : null;\n      message.channel\n        .send(\n          status\n            ? printPickStatus(result)\n            : msg || `**${result.pickedPlayers.username}** is already picked`\n        )\n        .catch(console.error + ':pick:');\n      break;\n    }\n\n    case commands.captain.includes(action): {\n      const { status, result, msg } = addCaptain(user, PugList);\n      status\n        ? revisePugList(result.pug.discriminator, result.pug, 'update')\n        : null;\n      await message.channel\n        .send(status ? printAddCaptainStatus(user, result) : msg)\n        .catch(console.error + ':pick:');\n\n      status && result.captainsReady\n        ? pugEventEmitter.emit(\n            pugEvents.captainsReady,\n            result.pug.discriminator\n          )\n        : null;\n      break;\n    }\n\n    default:\n      console.log('no match');\n  }\n}\n\n/**\n * C A C H E\n *    S E T U P\n *       A N D\n *         M A N I P U L A T I O N\n */\n\n(async () => {\n  cachedDB = await API.getCopyOfDB(`/`);\n  bot.login(process.env.DISCORD_BOT_TOKEN);\n})();\n\nconst updateCache = (toUpdate, newCache) => (cachedDB[toUpdate] = newCache);\nconst revisePugList = (discriminator, pug, action) => {\n  if (action === 'update') PugList[discriminator] = pug;\n  else if (action === 'remove' && PugList[discriminator])\n    delete PugList[discriminator];\n};\n\n/**\n * P U G\n *    E V E N T S\n */\npugEventEmitter.on(pugEvents.captainsReady, discriminator => {\n  const { Channel = {} } = cachedDB;\n  const pug = PugList[discriminator];\n  bot.channels\n    .get(Channel.preferredChannel)\n    .send(broadCastCaptainsReady(pug))\n    .catch(console.error + ':broadCastCaptains:');\n});\n"]}