{"version":3,"sources":["../src/bot.js"],"names":["dotenv","config","cachedDB","PugList","disabledEvents","bot","Client","on","console","log","message","author","equals","user","content","startsWith","prefix","Servers","serversObj","Pugs","id","username","isUserMentioned","mentions","users","first","userMentioned","roles","member","args","substring","length","split","filter","Boolean","action","toLowerCase","hasAdminCmd","commands","admincmds","includes","isValidAdminCmd","setchannel","servers","addqueryserver","delqueryserver","queryut99server","addgametype","delgametype","joingametype","leavegametype","listgametype","pickplayer","captain","channelId","channel","result","status","updateCache","cache","send","msg","catch","error","slice","filledPugs","reduce","acc","pug","discriminator","revisePugList","list","parseInt","noPlayers","push","forBroadcast","map","picking","allLeaveMsgs","op","allPugLeaveMsgs","prev","deadPugs","pickedPlayers","captainsReady","pugEventEmitter","emit","pugEvents","API","getCopyOfDB","login","process","env","DISCORD_BOT_TOKEN","toUpdate","newCache","Channel","channels","get","preferredChannel"],"mappings":"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","file":"bot.js","sourcesContent":["import { Client } from 'discord.js';\nimport dotenv from 'dotenv';\nimport pugEventEmitter from './pugEvent';\nimport { prefix, commands, pugEvents } from './constants';\nimport {\n  addQueryServer,\n  queryUT99Server,\n  delQueryServer,\n  setPreferredChannel,\n} from './ut99query';\nimport {\n  addGameType,\n  delGameType,\n  joinGameType,\n  leaveGameType,\n  listAvailablePugs,\n  pickPugPlayer,\n  addCaptain,\n} from './pug';\nimport {\n  printServerStatus,\n  printServerList,\n  printPugJoinStatus,\n  printPugLeaveStatus,\n  printPugStatuses,\n  broadCastFilledPugs,\n  broadCastDeadPugs,\n  broadCastCaptainsReady,\n  printPickStatus,\n  printAddCaptainStatus,\n} from './formats';\nimport { checkIfRoleIsPrivileged, fixSpecialCharactersInName } from './helpers';\nimport { createSortedArrayFromObject } from './util';\nimport API from './api';\n\ndotenv.config();\n\n/**\n * PugList is list of pugs active at any moment on the server\n * Pugs are the pug(s)/gametype(s) registered on the server with their props\n */\n\nlet cachedDB = {};\nlet PugList = {};\n\nconst disabledEvents = ['TYPING_START', 'CHANNEL_UPDATE', 'USER_UPDATE'];\nconst bot = new Client({ disabledEvents });\n\nbot.on('ready', () => {\n  console.log('ready');\n});\n\nbot.on('message', async message => {\n  if (message.author.equals(bot.user)) return;\n  if (!message.content.startsWith(prefix)) return;\n\n  const { Servers: serversObj = {}, Pugs = {} } = cachedDB;\n\n  const user = {\n    id: message.author.id,\n    username: fixSpecialCharactersInName(message.author.username),\n  };\n\n  const isUserMentioned = message.mentions.users.first();\n  const userMentioned = {\n    id: isUserMentioned && isUserMentioned.id,\n    username:\n      isUserMentioned && fixSpecialCharactersInName(isUserMentioned.username),\n  };\n\n  const roles = message.member.roles;\n  const args = message.content\n    .substring(prefix.length)\n    .split(' ')\n    .filter(Boolean);\n  const action = args[0].toLowerCase();\n\n  const hasAdminCmd = commands.admincmds.includes(action);\n  const isValidAdminCmd = hasAdminCmd && checkIfRoleIsPrivileged(roles);\n\n  switch (true) {\n    case checkIfRoleIsPrivileged(roles) &&\n      commands.setchannel.includes(action): {\n      const channelId = message.channel.id;\n      const result = await setPreferredChannel(channelId);\n      result.status ? updateCache('Channel', result.cache) : '';\n      message.channel.send(result.msg);\n      break;\n    }\n\n    case commands.servers.includes(action): {\n      const Servers = createSortedArrayFromObject(serversObj, 'timestamp');\n      message.channel\n        .send(printServerList(Servers))\n        .catch(console.error + ':list:');\n      break;\n    }\n\n    case checkIfRoleIsPrivileged(roles) &&\n      commands.addqueryserver.includes(action): {\n      const Servers = createSortedArrayFromObject(serversObj);\n      const result = await addQueryServer(args, Servers);\n      result.status ? updateCache('Servers', result.cache) : '';\n      message.channel.send(result.msg);\n      break;\n    }\n\n    case checkIfRoleIsPrivileged(roles) &&\n      commands.delqueryserver.includes(action): {\n      const Servers = createSortedArrayFromObject(serversObj);\n      const result = await delQueryServer(args, Servers);\n      result.status ? updateCache('Servers', result.cache) : '';\n      message.channel.send(result.msg);\n      break;\n    }\n\n    case commands.queryut99server.includes(action): {\n      const Servers = createSortedArrayFromObject(serversObj, 'timestamp');\n      const result = await queryUT99Server(args[1], Servers);\n      message.channel\n        .send(result.status ? printServerStatus(result) : result.msg)\n        .catch(console.error + ':query:');\n      break;\n    }\n\n    case commands.addgametype.includes(action): {\n      const result = await addGameType(args, Pugs);\n      result.status ? updateCache('Pugs', result.cache) : '';\n      message.channel.send(result.msg);\n      break;\n    }\n\n    case commands.delgametype.includes(action): {\n      const result = await delGameType(args, Pugs);\n      result.status ? updateCache('Pugs', result.cache) : '';\n      message.channel.send(result.msg);\n      break;\n    }\n\n    case commands.joingametype.includes(action): {\n      if (hasAdminCmd && !isValidAdminCmd) break;\n\n      const { status, result, msg } = joinGameType(\n        isValidAdminCmd ? args.slice(1) : args,\n        isValidAdminCmd ? userMentioned : user,\n        Pugs,\n        PugList\n      );\n      const filledPugs = result.reduce((acc, { pug, discriminator }) => {\n        if (pug) {\n          revisePugList(discriminator, pug, 'update');\n          pug.list.length === parseInt(pug.noPlayers) ? acc.push(pug) : null;\n        }\n        return acc;\n      }, []);\n      message.channel\n        .send(status ? printPugJoinStatus(result) : msg)\n        .catch(console.error + ':join:');\n\n      const forBroadcast = filledPugs.map(pug => {\n        if (PugList[pug.discriminator].picking) {\n          const allLeaveMsgs = Object.values(PugList).reduce((acc, op) => {\n            if (pug.discriminator !== op.discriminator) {\n              const allPugLeaveMsgs = pug.list.reduce((prev, user) => {\n                const { result } = leaveGameType(\n                  ['l', op.discriminator],\n                  user,\n                  Pugs,\n                  PugList\n                );\n                if (result[0].pug) {\n                  revisePugList(\n                    op.discriminator,\n                    result[0].pug,\n                    result[0].pug.list.length === 0 ? 'remove' : 'update'\n                  );\n                  const msg = printPugLeaveStatus(result);\n                  prev += `${msg} `;\n                }\n                return prev;\n              }, ``);\n              acc += `${allPugLeaveMsgs} \\n`;\n            }\n            return acc;\n          }, ``);\n          allLeaveMsgs && message.channel.send(allLeaveMsgs);\n          return pug;\n        }\n      });\n      forBroadcast.length > 0\n        ? message.channel.send(\n            broadCastFilledPugs(forBroadcast.filter(Boolean))\n          )\n        : null;\n      break;\n    }\n\n    case commands.leavegametype.includes(action): {\n      const { status, result, msg } = leaveGameType(args, user, Pugs, PugList);\n      const deadPugs = result.reduce((acc, { pug, discriminator }) => {\n        if (pug) {\n          revisePugList(\n            discriminator,\n            pug,\n            pug.list.length === 0 ? 'remove' : 'update'\n          );\n          pug.list.length === parseInt(pug.noPlayers) - 1\n            ? acc.push({ ...pug, user })\n            : null;\n        }\n        return acc;\n      }, []);\n      message.channel\n        .send(status ? printPugLeaveStatus(result) : msg)\n        .catch(console.error + ':leave:');\n      deadPugs.length > 0\n        ? message.channel.send(broadCastDeadPugs(deadPugs))\n        : null;\n      break;\n    }\n\n    case commands.listgametype.includes(action): {\n      const { status, result, msg } = listAvailablePugs(args, PugList);\n      message.channel\n        .send(status ? printPugStatuses(result) : msg)\n        .catch(console.error + ':list:');\n      break;\n    }\n\n    case commands.pickplayer.includes(action): {\n      if (hasAdminCmd && !isValidAdminCmd) break;\n\n      const { status, result, msg } = pickPugPlayer(\n        isValidAdminCmd ? args.slice(1) : args,\n        isValidAdminCmd ? userMentioned : user,\n        PugList\n      );\n\n      status\n        ? revisePugList(\n            result.pug.discriminator,\n            result.pug,\n            !result.picking ? 'remove' : 'update'\n          )\n        : null;\n      message.channel\n        .send(\n          status\n            ? printPickStatus(result)\n            : msg || `**${result.pickedPlayers.username}** is already picked`\n        )\n        .catch(console.error + ':pick:');\n      break;\n    }\n\n    case commands.captain.includes(action): {\n      const { status, result, msg } = addCaptain(user, PugList);\n      status\n        ? revisePugList(result.pug.discriminator, result.pug, 'update')\n        : null;\n      await message.channel\n        .send(status ? printAddCaptainStatus(user, result) : msg)\n        .catch(console.error + ':pick:');\n\n      status && result.captainsReady\n        ? pugEventEmitter.emit(\n            pugEvents.captainsReady,\n            result.pug.discriminator\n          )\n        : null;\n      break;\n    }\n\n    default:\n      console.log('no match');\n  }\n});\n\n(async () => {\n  cachedDB = await API.getCopyOfDB(`/`);\n  bot.login(process.env.DISCORD_BOT_TOKEN);\n})();\n\nconst updateCache = (toUpdate, newCache) => (cachedDB[toUpdate] = newCache);\n\nconst revisePugList = (discriminator, pug, action) => {\n  if (action === 'update') PugList[discriminator] = pug;\n  else if (action === 'remove' && PugList[discriminator])\n    delete PugList[discriminator];\n};\n\n/*\n  Events emitted for pugs\n*/\npugEventEmitter.on(pugEvents.captainsReady, discriminator => {\n  const { Channel = {} } = cachedDB;\n  const pug = PugList[discriminator];\n  bot.channels\n    .get(Channel.preferredChannel)\n    .send(broadCastCaptainsReady(pug))\n    .catch(console.error + ':broadCastCaptains:');\n});\n"]}