{"version":3,"sources":["../src/bot.js"],"names":["dotenv","config","cachedDB","PugList","disabledEvents","bot","Client","on","console","log","message","author","equals","user","content","startsWith","prefix","Servers","serversObj","Pugs","id","username","args","substring","length","split","action","toLowerCase","roles","member","commands","setchannel","includes","servers","addqueryserver","delqueryserver","queryut99server","addgametype","delgametype","joingametype","leavegametype","listgametype","pickplayer","captain","channelId","channel","result","status","updateCache","cache","send","msg","catch","error","filledPugs","reduce","acc","pug","discriminator","revisePugList","list","parseInt","noPlayers","push","forBroadcast","map","picking","allLeaveMsgs","op","allPugLeaveMsgs","prev","filter","Boolean","deadPugs","pickedPlayers","captainsReady","pugEventEmitter","emit","pugEvents","API","getCopyOfDB","login","process","env","DISCORD_BOT_TOKEN","toUpdate","newCache","Channel","channels","get","preferredChannel"],"mappings":"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","file":"bot.js","sourcesContent":["import { Client } from 'discord.js';\nimport dotenv from 'dotenv';\nimport pugEventEmitter from './pugEvent';\nimport { prefix, commands, pugEvents } from './constants';\nimport {\n  addQueryServer,\n  queryUT99Server,\n  delQueryServer,\n  setPreferredChannel,\n} from './ut99query';\nimport {\n  addGameType,\n  delGameType,\n  joinGameType,\n  leaveGameType,\n  listAvailablePugs,\n  pickPugPlayer,\n  addCaptain,\n} from './pug';\nimport {\n  printServerStatus,\n  printServerList,\n  printPugJoinStatus,\n  printPugLeaveStatus,\n  printPugStatuses,\n  broadCastFilledPugs,\n  broadCastDeadPugs,\n  broadCastCaptainsReady,\n  printPickStatus,\n  printAddCaptainStatus,\n} from './formats';\nimport { checkIfRoleIsPrivileged, fixSpecialCharactersInName } from './helpers';\nimport { createSortedArrayFromObject } from './util';\nimport API from './api';\n\ndotenv.config();\n\n/**\n * PugList is list of pugs active at any moment on the server\n * Pugs are the pug(s)/gametype(s) registered on the server with their props\n */\n\nlet cachedDB = {};\nlet PugList = {};\n\nconst disabledEvents = ['TYPING_START', 'CHANNEL_UPDATE', 'USER_UPDATE'];\nconst bot = new Client({ disabledEvents });\n\nbot.on('ready', () => {\n  console.log('ready');\n});\n\nbot.on('message', async message => {\n  if (message.author.equals(bot.user)) return;\n  if (!message.content.startsWith(prefix)) return;\n\n  const { Servers: serversObj = {}, Pugs = {} } = cachedDB;\n  const user = {\n    id: message.author.id,\n    username: fixSpecialCharactersInName(message.author.username),\n  };\n\n  const args = message.content.substring(prefix.length).split(' ');\n  const action = args[0].toLowerCase();\n  const roles = message.member.roles;\n\n  switch (true) {\n    case checkIfRoleIsPrivileged(roles) &&\n      commands.setchannel.includes(action): {\n      const channelId = message.channel.id;\n      const result = await setPreferredChannel(channelId);\n      result.status ? updateCache('Channel', result.cache) : '';\n      message.channel.send(result.msg);\n      break;\n    }\n\n    case commands.servers.includes(action): {\n      const Servers = createSortedArrayFromObject(serversObj, 'timestamp');\n      message.channel\n        .send(printServerList(Servers))\n        .catch(console.error + ':list:');\n      break;\n    }\n\n    case checkIfRoleIsPrivileged(roles) &&\n      commands.addqueryserver.includes(action): {\n      const Servers = createSortedArrayFromObject(serversObj);\n      const result = await addQueryServer(args, Servers);\n      result.status ? updateCache('Servers', result.cache) : '';\n      message.channel.send(result.msg);\n      break;\n    }\n\n    case checkIfRoleIsPrivileged(roles) &&\n      commands.delqueryserver.includes(action): {\n      const Servers = createSortedArrayFromObject(serversObj);\n      const result = await delQueryServer(args, Servers);\n      result.status ? updateCache('Servers', result.cache) : '';\n      message.channel.send(result.msg);\n      break;\n    }\n\n    case commands.queryut99server.includes(action): {\n      const Servers = createSortedArrayFromObject(serversObj, 'timestamp');\n      const result = await queryUT99Server(args[1], Servers);\n      message.channel\n        .send(result.status ? printServerStatus(result) : result.msg)\n        .catch(console.error + ':query:');\n      break;\n    }\n\n    case commands.addgametype.includes(action): {\n      const result = await addGameType(args, Pugs);\n      result.status ? updateCache('Pugs', result.cache) : '';\n      message.channel.send(result.msg);\n      break;\n    }\n\n    case commands.delgametype.includes(action): {\n      const result = await delGameType(args, Pugs);\n      result.status ? updateCache('Pugs', result.cache) : '';\n      message.channel.send(result.msg);\n      break;\n    }\n\n    case commands.joingametype.includes(action): {\n      const { status, result, msg } = joinGameType(args, user, Pugs, PugList);\n      const filledPugs = result.reduce((acc, { pug, discriminator }) => {\n        if (pug) {\n          revisePugList(discriminator, pug, 'update');\n          pug.list.length === parseInt(pug.noPlayers) ? acc.push(pug) : null;\n        }\n        return acc;\n      }, []);\n      message.channel\n        .send(status ? printPugJoinStatus(result) : msg)\n        .catch(console.error + ':join:');\n\n      const forBroadcast = filledPugs.map(pug => {\n        if (PugList[pug.discriminator].picking) {\n          console.log('1one');\n          const allLeaveMsgs = Object.values(PugList).reduce((acc, op) => {\n            console.log(op.discriminator);\n            if (pug.discriminator !== op.discriminator) {\n              const allPugLeaveMsgs = pug.list.reduce((prev, user) => {\n                const { result } = leaveGameType(\n                  ['l', op.discriminator],\n                  user,\n                  Pugs,\n                  PugList\n                );\n                if (result[0].pug) {\n                  revisePugList(\n                    op.discriminator,\n                    result[0].pug,\n                    result[0].pug.list.length === 0 ? 'remove' : 'update'\n                  );\n                  const msg = printPugLeaveStatus(result);\n                  prev += `${msg} `;\n                }\n                return prev;\n              }, ``);\n              acc += `${allPugLeaveMsgs} \\n`;\n            }\n            return acc;\n          }, ``);\n          allLeaveMsgs && message.channel.send(allLeaveMsgs);\n          return pug;\n        }\n      });\n      forBroadcast.length > 0\n        ? message.channel.send(\n            broadCastFilledPugs(forBroadcast.filter(Boolean))\n          )\n        : null;\n      break;\n    }\n\n    case commands.leavegametype.includes(action): {\n      const { status, result, msg } = leaveGameType(args, user, Pugs, PugList);\n      const deadPugs = result.reduce((acc, { pug, discriminator }) => {\n        if (pug) {\n          revisePugList(\n            discriminator,\n            pug,\n            pug.list.length === 0 ? 'remove' : 'update'\n          );\n          pug.list.length === parseInt(pug.noPlayers) - 1\n            ? acc.push({ ...pug, user })\n            : null;\n        }\n        return acc;\n      }, []);\n      message.channel\n        .send(status ? printPugLeaveStatus(result) : msg)\n        .catch(console.error + ':leave:');\n      deadPugs.length > 0\n        ? message.channel.send(broadCastDeadPugs(deadPugs))\n        : null;\n      break;\n    }\n\n    case commands.listgametype.includes(action): {\n      const { status, result, msg } = listAvailablePugs(args, PugList);\n      message.channel\n        .send(status ? printPugStatuses(result) : msg)\n        .catch(console.error + ':list:');\n      break;\n    }\n\n    case commands.pickplayer.includes(action): {\n      const { status, result, msg } = pickPugPlayer(args, user, PugList);\n      status\n        ? revisePugList(\n            result.pug.discriminator,\n            result.pug,\n            !result.picking ? 'remove' : 'update'\n          )\n        : null;\n      message.channel\n        .send(\n          status\n            ? printPickStatus(result)\n            : msg || `**${result.pickedPlayers.username}** is already picked`\n        )\n        .catch(console.error + ':pick:');\n      break;\n    }\n\n    case commands.captain.includes(action): {\n      const { status, result, msg } = addCaptain(user, PugList);\n      status\n        ? revisePugList(result.pug.discriminator, result.pug, 'update')\n        : null;\n      await message.channel\n        .send(status ? printAddCaptainStatus(user, result) : msg)\n        .catch(console.error + ':pick:');\n\n      status && result.captainsReady\n        ? pugEventEmitter.emit(\n            pugEvents.captainsReady,\n            result.pug.discriminator\n          )\n        : null;\n      break;\n    }\n    default:\n      console.log('no match');\n  }\n});\n\n(async () => {\n  cachedDB = await API.getCopyOfDB(`/`);\n  bot.login(process.env.DISCORD_BOT_TOKEN);\n})();\n\nconst updateCache = (toUpdate, newCache) => (cachedDB[toUpdate] = newCache);\n\nconst revisePugList = (discriminator, pug, action) => {\n  if (action === 'update') PugList[discriminator] = pug;\n  else if (action === 'remove' && PugList[discriminator])\n    delete PugList[discriminator];\n};\n\n/*\n  Events emitted for pugs\n*/\npugEventEmitter.on(pugEvents.captainsReady, discriminator => {\n  const { Channel = {} } = cachedDB;\n  const pug = PugList[discriminator];\n  bot.channels\n    .get(Channel.preferredChannel)\n    .send(broadCastCaptainsReady(pug))\n    .catch(console.error + ':broadCastCaptains:');\n});\n"]}