{"version":3,"sources":["../src/pug.js"],"names":["addGameType","Pugs","_","gameName","noPlayers","noTeams","uid","isNaN","status","msg","discriminator","toLowerCase","pickingOrder","parseInt","newGameType","API","pushToDB","result","console","log","delGameType","args","deleteFromDB","joinGameType","user","PugList","length","map","game","g","joinStatus","pugProps","pug","Pug","addPlayer","cleanup","activeCount","list","error","leaveGameType","action","p","playerIndex","findPlayer","removePlayer","listAvailablePugs","forGame","picking","withList","pickPugPlayer","filter","some","u","id","captain","team","turn","activePug","captains","res","pickPlayer","picked","captainTimer","setTimeout","present","i","pIndex","push","pugEventEmitter","emit","pugEvents","captainsReady","forEach","pick","findIndex","fillPug","index","splice","stopPug","pickedPlayers","player","lastPlayerIndex","lastPlayerTeam","finished","clearTimeout"],"mappings":"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","file":"pug.js","sourcesContent":["import API from './api';\nimport { getPickingOrder } from './helpers';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { getRandomInt } from './util';\nimport { pugEvents } from './constants';\nimport pugEventEmitter from './pugEvent';\n\nexport const addGameType = async (\n  [_, gameName, noPlayers, noTeams, uid],\n  Pugs\n) => {\n  try {\n    if (isNaN(noPlayers) || isNaN(noTeams) || !gameName || !uid)\n      return { status: false, msg: 'Invalid command' };\n\n    const discriminator = uid.toLowerCase();\n    if (Pugs[discriminator])\n      return { status: false, msg: 'Gametype already exists' };\n\n    const pickingOrder = getPickingOrder(\n      parseInt(noPlayers),\n      parseInt(noTeams)\n    );\n\n    if (!pickingOrder)\n      return { status: false, msg: 'Invalid No. of players/teams' };\n\n    const newGameType = {\n      gameName,\n      pickingOrder,\n      discriminator,\n      noPlayers: parseInt(noPlayers),\n      noTeams: parseInt(noTeams),\n    };\n\n    const result = await API.pushToDB('/Pugs', discriminator, newGameType);\n    return { ...result, msg: 'Gametype added' };\n  } catch (error) {\n    console.log(error);\n    return { status: false, msg: 'Something went wrong' };\n  }\n};\n\nexport const delGameType = async ([_, discriminator, ...args], Pugs) => {\n  //TODO: To remove existing references of this game type(?)\n  try {\n    if (!Pugs[discriminator])\n      return { status: false, msg: \"Gametype doesn't exist\" };\n\n    const result = await API.deleteFromDB('/Pugs', discriminator);\n    return { ...result, msg: 'Gametype removed' };\n  } catch (error) {\n    console.log(error);\n    return { status: false, msg: 'Something went wrong' };\n  }\n};\n\nexport const joinGameType = ([_, ...args], user, Pugs, PugList) => {\n  try {\n    if (args.length === 0)\n      return { status: false, result: [], msg: 'Invalid command' };\n\n    const result = args.map(g => {\n      const game = g.toLowerCase(); // game is basically the discriminator\n\n      if (!Pugs[game]) return { user, discriminator: game, joinStatus: -1 };\n\n      const pugProps = Pugs[game];\n      const pug = !PugList[game] ? new Pug(pugProps) : cloneDeep(PugList[game]);\n      const joinStatus = pug.addPlayer(user);\n\n      PugList[game] && PugList[game].cleanup(); // because we have cloned p and will no longer be using it\n      return {\n        pug,\n        user,\n        discriminator: pug.discriminator,\n        noPlayers: pug.noPlayers,\n        activeCount: pug.list.length,\n        joinStatus,\n      };\n    });\n    return { status: true, result };\n  } catch (error) {\n    console.log(error);\n    return { status: false, msg: 'Something went wrong' };\n  }\n};\n\nexport const leaveGameType = ([action, ...args], user, Pugs, PugList) => {\n  try {\n    if (action === 'lva') {\n      const result = Object.values(PugList).map(p => {\n        const pug = cloneDeep(p);\n        const playerIndex = pug.findPlayer(user);\n        if (playerIndex > -1) {\n          pug.removePlayer(playerIndex);\n\n          p.cleanup(); // because we have cloned p and will no longer be using it\n          return { pug, user, discriminator: pug.discriminator };\n        }\n        return {};\n      });\n      return { status: true, result };\n    } else {\n      if (args.length === 0)\n        return { status: false, result: [], msg: 'Invalid command' };\n\n      const result = args.map(g => {\n        const game = g.toLowerCase(); // game is basically the discriminator\n\n        if (!Pugs[game]) return {};\n        const pug = PugList[game] ? cloneDeep(PugList[game]) : null;\n        if (!pug) return {};\n\n        const playerIndex = pug.findPlayer(user);\n        if (playerIndex > -1) {\n          pug.removePlayer(playerIndex);\n\n          PugList[game] && PugList[game].cleanup(); // because we have cloned p and will no longer be using it\n          return { pug, user, discriminator: pug.discriminator };\n        }\n        return {};\n      });\n      return { status: true, result };\n    }\n  } catch (error) {\n    console.log(error);\n    return { status: false, msg: 'Something went wrong' };\n  }\n};\n\n// TODO: Use constants for commands for better DX and maybe separate them in methods\nexport const listAvailablePugs = ([action, forGame, ...args], PugList) => {\n  try {\n    if (action === 'lsa') {\n      const result = Object.values(PugList).map(p => ({\n        discriminator: p.discriminator,\n        noPlayers: p.noPlayers,\n        list: [...p.list],\n        picking: p.picking,\n        withList: true,\n      }));\n      return { status: true, result };\n    } else {\n      if (!forGame) {\n        const result = Object.values(PugList).map(p => ({\n          discriminator: p.discriminator,\n          noPlayers: p.noPlayers,\n          list: [...p.list],\n          picking: p.picking,\n          withList: false,\n        }));\n        return { status: true, result };\n      }\n\n      const game = forGame.toLowerCase(); // game is basically the discriminator\n      if (!PugList[game]) return null;\n      const pug = PugList[game];\n      const result = [\n        {\n          discriminator: pug.discriminator,\n          noPlayers: pug.noPlayers,\n          list: [...pug.list],\n          picking: pug.picking,\n          withList: true,\n        },\n      ];\n      return { status: true, result };\n    }\n  } catch (error) {\n    console.log(error);\n    return { status: false, msg: 'Something went wrong' };\n  }\n};\n\nexport const pickPugPlayer = ([_, playerIndex], user, PugList) => {\n  if (!playerIndex) return;\n  const [activePug] = Object.values(PugList).filter(\n    p =>\n      p.picking &&\n      p.list.some(\n        u =>\n          u.id === user.id &&\n          u.captain !== null &&\n          u.team === p.pickingOrder[p.turn]\n      )\n  );\n\n  if (!activePug) return { status: false, msg: `Invalid` };\n  if (activePug.captains.length !== activePug.noTeams)\n    return { status: false, msg: `Please wait for all captains to be picked` };\n  if (playerIndex < 1 || playerIndex > activePug.list.length)\n    return { status: false, msg: `Invalid pick` };\n\n  const pug = cloneDeep(activePug);\n  const res = pug.pickPlayer(playerIndex - 1, pug.pickingOrder[pug.turn]);\n  const result = { pug, ...res };\n  return { status: result.picked, result };\n};\n\nexport class Pug {\n  constructor({ discriminator, gameName, noPlayers, noTeams, pickingOrder }) {\n    this.discriminator = discriminator;\n    this.gameName = gameName;\n    this.noPlayers = noPlayers;\n    this.noTeams = noTeams;\n    this.pickingOrder = pickingOrder;\n    this.turn = 0;\n    this.picking = false;\n    this.list = [];\n    this.captains = [];\n    this.captainTimer = null;\n  }\n\n  fillPug() {\n    this.picking = true;\n    this.captainTimer = setTimeout(() => {\n      const present = this.captains.length;\n      for (let i = 0; i < this.noTeams - present; i++) {\n        while (1) {\n          const pIndex = getRandomInt(0, this.noPlayers - 1);\n          if (this.list[pIndex]['captain'] === null) {\n            this.list[pIndex]['captain'] = this.list[pIndex]['team'] = i;\n            this.list[pIndex]['pick'] = 0;\n            this.captains.push(this.list[pIndex]);\n            break;\n          }\n        }\n      }\n      pugEventEmitter.emit(pugEvents.captainsReady, this.discriminator);\n    }, 5000);\n  }\n\n  stopPug() {\n    this.picking = false;\n    this.turn = 0;\n    this.list.forEach(user => (user.captain = user.team = user.pick = null));\n    this.cleanup();\n  }\n\n  addPlayer(user) {\n    if (!this.picking) {\n      if (this.list.findIndex(u => u.id === user.id) > -1) return 2;\n      this.list.push({ team: null, captain: null, pick: null, ...user });\n      this.list.length === this.noPlayers ? this.fillPug() : null;\n      return 1;\n    }\n    return 0;\n  }\n\n  removePlayer(index) {\n    this.list.splice(index, 1);\n    if (this.picking) this.stopPug();\n  }\n\n  pickPlayer(pIndex, team) {\n    if (this.list[pIndex]['team'] === null) {\n      this.list[pIndex]['team'] = team;\n      this.turn += 1;\n      this.list[pIndex]['pick'] = this.turn;\n\n      const pickedPlayers = [{ player: this.list[pIndex], team }];\n      // last pick automatically goes\n      if (this.turn === this.pickingOrder.length - 1) {\n        const lastPlayerIndex = this.list.findIndex(u => u.team === null);\n        const lastPlayerTeam = this.pickingOrder[this.turn];\n\n        this.list[lastPlayerIndex]['team'] = lastPlayerTeam;\n        this.turn += 1;\n        this.list[lastPlayerIndex]['pick'] = this.turn;\n        // pug ended\n        this.picking = false;\n        pickedPlayers.push({\n          player: this.list[lastPlayerIndex],\n          team: lastPlayerTeam,\n        });\n      }\n      return { picked: true, pickedPlayers, picking: this.picking };\n    }\n    return {\n      picked: false,\n      pickedPlayers: this.list[pIndex],\n      finished: this.picking,\n    };\n  }\n\n  findPlayer(user) {\n    return this.list.findIndex(u => u.id === user.id);\n  }\n\n  cleanup() {\n    this.picking = false;\n    clearTimeout(this.captainTimer);\n  }\n}\n"]}