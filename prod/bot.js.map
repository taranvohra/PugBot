{"version":3,"sources":["../src/bot.js"],"names":["message","author","equals","bot","user","content","startsWith","prefix","cachedDB","Servers","serversObj","Pugs","id","username","isUserMentioned","mentions","users","first","userMentioned","roles","member","args","substring","length","split","filter","Boolean","action","toLowerCase","hasAdminCmd","commands","admincmds","includes","isValidAdminCmd","setchannel","servers","addqueryserver","delqueryserver","queryut99server","addgametype","delgametype","joingametype","leavegametype","listgametype","pickplayer","captain","picking","promote","channelId","channel","result","status","updateCache","cache","send","msg","catch","console","error","slice","PugList","filledPugs","reduce","acc","pug","discriminator","revisePugList","list","parseInt","noPlayers","push","forBroadcast","map","allLeaveMsgs","op","allPugLeaveMsgs","prev","deadPugs","offline","pickedPlayers","captainsReady","pugEventEmitter","emit","pugEvents","pugs","log","onMessage","dotenv","config","disabledEvents","Client","on","_","channels","guild","presence","some","p","u","Channel","get","preferredChannel","channeluser","User","Message","attachments","embeds","API","getCopyOfDB","login","process","env","DISCORD_BOT_TOKEN","toUpdate","newCache"],"mappings":"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","file":"bot.js","sourcesContent":["import { Client, Message, User } from 'discord.js';\r\nimport dotenv from 'dotenv';\r\nimport pugEventEmitter from './pugEvent';\r\nimport { prefix, commands, pugEvents, offline } from './constants';\r\nimport {\r\n  addQueryServer,\r\n  queryUT99Server,\r\n  delQueryServer,\r\n  setPreferredChannel,\r\n} from './ut99query';\r\nimport {\r\n  addGameType,\r\n  delGameType,\r\n  joinGameType,\r\n  leaveGameType,\r\n  listAvailablePugs,\r\n  pickPugPlayer,\r\n  addCaptain,\r\n  listCurrentPickings,\r\n  promoteAvailablePugs,\r\n} from './pug';\r\nimport {\r\n  printServerStatus,\r\n  printServerList,\r\n  printPugJoinStatus,\r\n  printPugLeaveStatus,\r\n  printPugStatuses,\r\n  broadCastFilledPugs,\r\n  broadCastDeadPugs,\r\n  broadCastCaptainsReady,\r\n  printPickStatus,\r\n  printAddCaptainStatus,\r\n  printPickingPugsStatus,\r\n  printPromoteStatus,\r\n} from './formats';\r\nimport { checkIfRoleIsPrivileged, fixSpecialCharactersInName } from './helpers';\r\nimport { createSortedArrayFromObject } from './util';\r\nimport API from './api';\r\n\r\ndotenv.config();\r\n\r\n/**\r\n * PugList is list of pugs active at any moment on the server\r\n * Pugs are the pug(s)/gametype(s) registered on the server with their props\r\n */\r\n\r\nlet cachedDB = {};\r\nlet PugList = {};\r\n\r\nconst disabledEvents = ['TYPING_START', 'CHANNEL_UPDATE', 'USER_UPDATE'];\r\nconst bot = new Client({ disabledEvents });\r\n\r\nbot.on('ready', () => {\r\n  console.log('ready');\r\n});\r\n\r\nbot.on(\r\n  'presenceUpdate',\r\n  (_, { user, guild: { channels }, presence: { status } }) => {\r\n    if (status === 'offline') {\r\n      if (\r\n        Object.values(PugList).some(p => p.list.some(u => u.id === user.id))\r\n      ) {\r\n        const { Channel = {} } = cachedDB;\r\n        const channel = channels.get(Channel.preferredChannel);\r\n        const channeluser = new User(bot, {\r\n          bot: false,\r\n          id: user.id,\r\n          username: user.username,\r\n        });\r\n        const message = new Message(\r\n          channel,\r\n          {\r\n            author: channeluser,\r\n            attachments: new Map(),\r\n            embeds: [],\r\n            content: `${prefix}lva ${offline}`,\r\n          },\r\n          bot\r\n        );\r\n        onMessage(message);\r\n      }\r\n    }\r\n  }\r\n);\r\n\r\nbot.on('message', onMessage);\r\n\r\nasync function onMessage(message) {\r\n  if (message.author.equals(bot.user)) return;\r\n  if (!message.content.startsWith(prefix)) return;\r\n\r\n  const { Servers: serversObj = {}, Pugs = {} } = cachedDB;\r\n\r\n  const user = {\r\n    id: message.author.id,\r\n    username: fixSpecialCharactersInName(message.author.username),\r\n  };\r\n\r\n  const isUserMentioned = message.mentions.users.first();\r\n  const userMentioned = {\r\n    id: isUserMentioned && isUserMentioned.id,\r\n    username:\r\n      isUserMentioned && fixSpecialCharactersInName(isUserMentioned.username),\r\n  };\r\n\r\n  const roles = message.member.roles;\r\n  const args = message.content\r\n    .substring(prefix.length)\r\n    .split(' ')\r\n    .filter(Boolean);\r\n  const action = args[0] ? args[0].toLowerCase() : null;\r\n\r\n  const hasAdminCmd = commands.admincmds.includes(action);\r\n  const isValidAdminCmd = hasAdminCmd && checkIfRoleIsPrivileged(roles);\r\n\r\n  switch (true) {\r\n    case checkIfRoleIsPrivileged(roles) &&\r\n      commands.setchannel.includes(action): {\r\n      const channelId = message.channel.id;\r\n      const result = await setPreferredChannel(channelId);\r\n      result.status ? updateCache('Channel', result.cache) : '';\r\n      message.channel.send(result.msg);\r\n      break;\r\n    }\r\n\r\n    case commands.servers.includes(action): {\r\n      const Servers = createSortedArrayFromObject(serversObj, 'timestamp');\r\n      message.channel\r\n        .send(printServerList(Servers))\r\n        .catch(console.error + ':list:');\r\n      break;\r\n    }\r\n\r\n    case checkIfRoleIsPrivileged(roles) &&\r\n      commands.addqueryserver.includes(action): {\r\n      const Servers = createSortedArrayFromObject(serversObj);\r\n      const result = await addQueryServer(args, Servers);\r\n      result.status ? updateCache('Servers', result.cache) : '';\r\n      message.channel.send(result.msg);\r\n      break;\r\n    }\r\n\r\n    case checkIfRoleIsPrivileged(roles) &&\r\n      commands.delqueryserver.includes(action): {\r\n      const Servers = createSortedArrayFromObject(serversObj);\r\n      const result = await delQueryServer(args, Servers);\r\n      result.status ? updateCache('Servers', result.cache) : '';\r\n      message.channel.send(result.msg);\r\n      break;\r\n    }\r\n\r\n    case commands.queryut99server.includes(action): {\r\n      const Servers = createSortedArrayFromObject(serversObj, 'timestamp');\r\n      const result = await queryUT99Server(args[1], Servers);\r\n      message.channel\r\n        .send(result.status ? printServerStatus(result) : result.msg)\r\n        .catch(console.error + ':query:');\r\n      break;\r\n    }\r\n\r\n    case commands.addgametype.includes(action): {\r\n      const result = await addGameType(args, Pugs);\r\n      result.status ? updateCache('Pugs', result.cache) : '';\r\n      message.channel.send(result.msg);\r\n      break;\r\n    }\r\n\r\n    case commands.delgametype.includes(action): {\r\n      const result = await delGameType(args, Pugs);\r\n      result.status ? updateCache('Pugs', result.cache) : '';\r\n      message.channel.send(result.msg);\r\n      break;\r\n    }\r\n\r\n    case commands.joingametype.includes(action): {\r\n      if (hasAdminCmd && !isValidAdminCmd) break;\r\n\r\n      const { status, result, msg } = joinGameType(\r\n        isValidAdminCmd ? args.slice(1) : args,\r\n        isValidAdminCmd ? userMentioned : user,\r\n        Pugs,\r\n        PugList\r\n      );\r\n      const filledPugs = result.reduce((acc, { pug, discriminator }) => {\r\n        if (pug) {\r\n          revisePugList(discriminator, pug, 'update');\r\n          pug.list.length === parseInt(pug.noPlayers) ? acc.push(pug) : null;\r\n        }\r\n        return acc;\r\n      }, []);\r\n      message.channel\r\n        .send(status ? printPugJoinStatus(result) : msg)\r\n        .catch(console.error + ':join:');\r\n\r\n      const forBroadcast = filledPugs.map(pug => {\r\n        if (PugList[pug.discriminator].picking) {\r\n          const allLeaveMsgs = Object.values(PugList).reduce((acc, op) => {\r\n            if (pug.discriminator !== op.discriminator) {\r\n              const allPugLeaveMsgs = pug.list.reduce((prev, user) => {\r\n                const { result } = leaveGameType(\r\n                  ['l', op.discriminator],\r\n                  user,\r\n                  Pugs,\r\n                  PugList\r\n                );\r\n                if (result[0].pug) {\r\n                  revisePugList(\r\n                    op.discriminator,\r\n                    result[0].pug,\r\n                    result[0].pug.list.length === 0 ? 'remove' : 'update'\r\n                  );\r\n                  const msg = printPugLeaveStatus(result);\r\n                  prev += `${msg} `;\r\n                }\r\n                return prev;\r\n              }, ``);\r\n              acc += `${allPugLeaveMsgs} \\n`;\r\n            }\r\n            return acc;\r\n          }, ``);\r\n          allLeaveMsgs && message.channel.send(allLeaveMsgs);\r\n          return pug;\r\n        }\r\n      });\r\n      forBroadcast.length > 0\r\n        ? message.channel.send(\r\n            broadCastFilledPugs(forBroadcast.filter(Boolean))\r\n          )\r\n        : null;\r\n      break;\r\n    }\r\n\r\n    case commands.leavegametype.includes(action): {\r\n      const { status, result, msg } = leaveGameType(args, user, Pugs, PugList);\r\n      const deadPugs = result.reduce((acc, { pug, discriminator }) => {\r\n        if (pug) {\r\n          revisePugList(\r\n            discriminator,\r\n            pug,\r\n            pug.list.length === 0 ? 'remove' : 'update'\r\n          );\r\n          pug.list.length === parseInt(pug.noPlayers) - 1\r\n            ? acc.push({ ...pug, user })\r\n            : null;\r\n        }\r\n        return acc;\r\n      }, []);\r\n      message.channel\r\n        .send(status ? printPugLeaveStatus(result, args[1] === offline) : msg)\r\n        .catch(console.error + ':leave:');\r\n      deadPugs.length > 0\r\n        ? message.channel.send(broadCastDeadPugs(deadPugs))\r\n        : null;\r\n      break;\r\n    }\r\n\r\n    case commands.listgametype.includes(action): {\r\n      const { status, result, msg } = listAvailablePugs(args, PugList);\r\n      message.channel\r\n        .send(status ? printPugStatuses(result) : msg)\r\n        .catch(console.error + ':list:');\r\n      break;\r\n    }\r\n\r\n    case commands.pickplayer.includes(action): {\r\n      if (hasAdminCmd && !isValidAdminCmd) break;\r\n\r\n      const { status, result, msg } = pickPugPlayer(\r\n        isValidAdminCmd ? args.slice(1) : args,\r\n        isValidAdminCmd ? userMentioned : user,\r\n        PugList\r\n      );\r\n\r\n      status\r\n        ? revisePugList(\r\n            result.pug.discriminator,\r\n            result.pug,\r\n            !result.picking ? 'remove' : 'update'\r\n          )\r\n        : null;\r\n      message.channel\r\n        .send(\r\n          status\r\n            ? printPickStatus(result)\r\n            : msg || `**${result.pickedPlayers.username}** is already picked`\r\n        )\r\n        .catch(console.error + ':pick:');\r\n      break;\r\n    }\r\n\r\n    case commands.captain.includes(action): {\r\n      const { status, result, msg } = addCaptain(user, PugList);\r\n      status\r\n        ? revisePugList(result.pug.discriminator, result.pug, 'update')\r\n        : null;\r\n      await message.channel\r\n        .send(status ? printAddCaptainStatus(user, result) : msg)\r\n        .catch(console.error + ':pick:');\r\n\r\n      status && result.captainsReady\r\n        ? pugEventEmitter.emit(\r\n            pugEvents.captainsReady,\r\n            result.pug.discriminator\r\n          )\r\n        : null;\r\n      break;\r\n    }\r\n\r\n    case commands.picking.includes(action): {\r\n      const { status, result, msg } = listCurrentPickings(args, Pugs, PugList);\r\n      message.channel.send(status ? printPickingPugsStatus(result.pugs) : msg);\r\n      break;\r\n    }\r\n\r\n    case commands.promote.includes(action): {\r\n      const { status, result, msg } = promoteAvailablePugs(args, PugList);\r\n      status ? message.channel.send(printPromoteStatus(result.pugs)) : null;\r\n      break;\r\n    }\r\n\r\n    default:\r\n      console.log('no match');\r\n  }\r\n}\r\n\r\n/**\r\n * C A C H E\r\n *    S E T U P\r\n *       A N D\r\n *         M A N I P U L A T I O N\r\n */\r\n\r\n(async () => {\r\n  cachedDB = await API.getCopyOfDB(`/`);\r\n  bot.login(process.env.DISCORD_BOT_TOKEN);\r\n})();\r\n\r\nconst updateCache = (toUpdate, newCache) => (cachedDB[toUpdate] = newCache);\r\nconst revisePugList = (discriminator, pug, action) => {\r\n  if (action === 'update') PugList[discriminator] = pug;\r\n  else if (action === 'remove' && PugList[discriminator])\r\n    delete PugList[discriminator];\r\n};\r\n\r\n/**\r\n * P U G\r\n *    E V E N T S\r\n */\r\npugEventEmitter.on(pugEvents.captainsReady, discriminator => {\r\n  const { Channel = {} } = cachedDB;\r\n  const pug = PugList[discriminator];\r\n  bot.channels\r\n    .get(Channel.preferredChannel)\r\n    .send(broadCastCaptainsReady(pug))\r\n    .catch(console.error + ':broadCastCaptains:');\r\n});\r\n"]}