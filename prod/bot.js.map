{"version":3,"sources":["../src/bot.js"],"names":["dotenv","config","cachedDB","PugList","disabledEvents","bot","Client","on","console","log","message","author","equals","user","content","startsWith","prefix","args","substring","length","split","action","toLowerCase","roles","member","commands","servers","includes","addqueryserver","delqueryserver","updatequeryserver","queryut99server","addgametype","delgametype","joingametype","leavegametype","listgametype","Servers","serversObj","channel","send","catch","error","result","status","updateCache","cache","msg","Pugs","id","username","forEach","pug","discriminator","revisePugList","list","API","getCopyOfDB","login","process","env","DISCORD_BOT_TOKEN","toUpdate","newCache"],"mappings":"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","file":"bot.js","sourcesContent":["import { Client } from 'discord.js';\nimport dotenv from 'dotenv';\nimport { prefix, commands } from './constants';\nimport { addQueryServer, queryUT99Server, delQueryServer } from './ut99query';\nimport {\n  addGameType,\n  delGameType,\n  joinGameType,\n  leaveGameType,\n  listAvailablePugs,\n} from './pug';\nimport {\n  printServerStatus,\n  printServerList,\n  printPugJoinStatus,\n  printPugLeaveStatus,\n  printPugStatuses,\n} from './formats';\nimport { checkIfRoleIsPrivileged, fixSpecialCharactersInName } from './helpers';\nimport { createSortedArrayFromObject } from './util';\nimport API from './api';\n\ndotenv.config();\n\n/**\n * PugList is list of pugs active at any moment on the server\n * Pugs are the pug(s)/gametype(s) registered on the server with their props\n */\n\nlet cachedDB = {};\nlet PugList = {};\n\nconst disabledEvents = ['TYPING_START', 'CHANNEL_UPDATE', 'USER_UPDATE'];\nconst bot = new Client({ disabledEvents });\n\nbot.on('ready', () => {\n  console.log('ready');\n});\n\nbot.on('message', async message => {\n  if (message.author.equals(bot.user)) return;\n  if (!message.content.startsWith(prefix)) return;\n\n  const args = message.content.substring(prefix.length).split(' ');\n  const action = args[0].toLowerCase();\n  const roles = message.member.roles;\n\n  switch (true) {\n    case commands.servers.includes(action): {\n      const { Servers: serversObj = {} } = cachedDB;\n      const Servers = createSortedArrayFromObject(serversObj, 'timestamp');\n\n      message.channel\n        .send(printServerList(Servers))\n        .catch(console.error + ':list:');\n      break;\n    }\n\n    case checkIfRoleIsPrivileged(roles) &&\n      commands.addqueryserver.includes(action): {\n      const { Servers: serversObj = {} } = cachedDB;\n      const Servers = createSortedArrayFromObject(serversObj);\n\n      const result = await addQueryServer(args, Servers);\n      result.status ? updateCache('Servers', result.cache) : '';\n      message.channel.send(result.msg);\n      break;\n    }\n\n    case checkIfRoleIsPrivileged(roles) &&\n      commands.delqueryserver.includes(action): {\n      const { Servers: serversObj = {} } = cachedDB;\n      const Servers = createSortedArrayFromObject(serversObj);\n\n      const result = await delQueryServer(args, Servers);\n      result.status ? updateCache('Servers', result.cache) : '';\n      message.channel.send(result.msg);\n      break;\n    }\n\n    case checkIfRoleIsPrivileged(roles) && commands.updatequeryserver:\n      console.log(args[0]);\n      break;\n\n    case commands.queryut99server.includes(action): {\n      const { Servers: serversObj = {} } = cachedDB;\n      const Servers = createSortedArrayFromObject(serversObj, 'timestamp');\n\n      const result = await queryUT99Server(args[1], Servers);\n      message.channel\n        .send(result.status ? printServerStatus(result) : result.msg)\n        .catch(console.error + ':query:');\n      break;\n    }\n\n    case commands.addgametype.includes(action): {\n      const { Pugs = {} } = cachedDB;\n\n      const result = await addGameType(args, Pugs);\n      result.status ? updateCache('Pugs', result.cache) : '';\n      message.channel.send(result.msg);\n      break;\n    }\n\n    case commands.delgametype.includes(action): {\n      const { Pugs = {} } = cachedDB;\n\n      const result = await delGameType(args, Pugs);\n      result.status ? updateCache('Pugs', result.cache) : '';\n      message.channel.send(result.msg);\n      break;\n    }\n\n    case commands.joingametype.includes(action): {\n      const { Pugs = {} } = cachedDB;\n      const user = {\n        id: message.author.id,\n        username: fixSpecialCharactersInName(message.author.username),\n      };\n      const { status, result, msg } = joinGameType(args, user, Pugs, PugList);\n      result.forEach(({ pug, discriminator }) =>\n        pug ? revisePugList(discriminator, pug, 'update') : null\n      );\n      message.channel\n        .send(status ? printPugJoinStatus(result) : msg)\n        .catch(console.error + ':join:');\n      break;\n    }\n\n    case commands.leavegametype.includes(action): {\n      const { Pugs = {} } = cachedDB;\n      const user = {\n        id: message.author.id,\n        username: fixSpecialCharactersInName(message.author.username),\n      };\n      const { status, result, msg } = leaveGameType(args, user, Pugs, PugList);\n      result.forEach(({ pug, discriminator }) => {\n        pug\n          ? revisePugList(\n              discriminator,\n              pug,\n              pug.list.length === 0 ? 'remove' : 'update'\n            )\n          : null;\n      });\n      message.channel\n        .send(status ? printPugLeaveStatus(result) : msg)\n        .catch(console.error + ':leave:');\n      break;\n    }\n\n    case commands.listgametype.includes(action): {\n      const { status, result, msg } = listAvailablePugs(args, PugList);\n      message.channel\n        .send(status ? printPugStatuses(result) : msg)\n        .catch(console.error + ':list:');\n      break;\n    }\n    default:\n      console.log('no match');\n  }\n});\n\n(async () => {\n  cachedDB = await API.getCopyOfDB(`/`);\n  bot.login(process.env.DISCORD_BOT_TOKEN);\n})();\n\nconst updateCache = (toUpdate, newCache) => (cachedDB[toUpdate] = newCache);\n\nconst revisePugList = (discriminator, pug, action) => {\n  if (action === 'update') PugList[discriminator] = pug;\n  else if (action === 'remove' && PugList[discriminator])\n    delete PugList[discriminator];\n};\n"]}