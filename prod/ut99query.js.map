{"version":3,"sources":["../src/ut99query.js"],"names":["addQueryServer","cachedDB","_","hp","args","split","host","port","reduce","acc","curr","name","aliases","status","msg","uid","some","parseInt","s","id","newServer","timestamp","Date","now","API","pushToDB","result","console","log","delQueryServer","index","deleteFromDB","updateQueryServer","queryUT99Server","getUT99ServerStatus","response","splittedResponse","filteredResult","shift","unshift","pFlag","players","push","info","setPreferredChannel","channelId"],"mappings":"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","file":"ut99query.js","sourcesContent":["import stringHash from 'string-hash';\r\nimport API from './api';\r\nimport {\r\n  createObjectFromArray,\r\n  checkKeyExistenceFromIndex,\r\n  getHostAndPortOfServerFromDB,\r\n  getUIDFromIndex,\r\n} from './helpers';\r\n\r\nexport const addQueryServer = async ([_, hp, ...args], cachedDB) => {\r\n  try {\r\n    const [host, port] = hp.split(':');\r\n    const { name, aliases } = args.reduce(\r\n      (acc, curr) => {\r\n        typeof curr === 'string'\r\n          ? (acc.name += curr + ' ')\r\n          : (acc.aliases = curr);\r\n        return acc;\r\n      },\r\n      { name: '', aliases: [] }\r\n    );\r\n\r\n    if (!host || !port || !name)\r\n      return { status: false, msg: 'Invalid command' };\r\n\r\n    const uid = stringHash(hp);\r\n\r\n    if (cachedDB.some(s => parseInt(s.id) === parseInt(uid)))\r\n      return { status: false, msg: 'Already exists' };\r\n\r\n    const newServer = { host, port, name, aliases, timestamp: Date.now() };\r\n\r\n    const result = await API.pushToDB('/Servers', uid, newServer);\r\n    return { ...result, msg: 'Query server added' };\r\n  } catch (error) {\r\n    console.log(error);\r\n    return { status: false, msg: 'Something went wrong' };\r\n  }\r\n};\r\n\r\nexport const delQueryServer = async ([_, index, ...args], cachedDB) => {\r\n  try {\r\n    const uid = getUIDFromIndex(cachedDB, parseInt(index));\r\n    if (!uid) return { status: false, msg: `Query server doesn't exist` };\r\n\r\n    const result = await API.deleteFromDB('/Servers', uid);\r\n    return { ...result, msg: 'Query server removed' };\r\n  } catch (error) {\r\n    console.log(error);\r\n    return { status: false, msg: 'Something went wrong' };\r\n  }\r\n};\r\n\r\nexport const updateQueryServer = () => {};\r\n\r\nexport const queryUT99Server = async (args, cachedDB) => {\r\n  const [host, port] = checkKeyExistenceFromIndex(cachedDB, parseInt(args))\r\n    ? getHostAndPortOfServerFromDB(cachedDB, parseInt(args))\r\n    : args.split(':');\r\n\r\n  if (!host || !port) return { status: false, msg: 'Invalid' };\r\n\r\n  try {\r\n    const response = await API.getUT99ServerStatus(host, parseInt(port) + 1);\r\n    const splittedResponse = response.split('\\\\');\r\n    const filteredResult = [...splittedResponse];\r\n    filteredResult.shift();\r\n    filteredResult.unshift();\r\n    const result = filteredResult.reduce(\r\n      (acc, curr) => {\r\n        if (curr === 'player_0' || curr === 'Player_0') acc.pFlag = true;\r\n        acc.pFlag ? acc.players.push(curr) : acc.info.push(curr);\r\n        return acc;\r\n      },\r\n      {\r\n        info: [],\r\n        players: [],\r\n        pFlag: false,\r\n      }\r\n    );\r\n\r\n    return {\r\n      status: true,\r\n      info: { ...createObjectFromArray(result.info), host, port },\r\n      players: createObjectFromArray(result.players),\r\n    };\r\n  } catch (error) {\r\n    console.log(error);\r\n    return { status: false, msg: `Could not query` };\r\n  }\r\n};\r\n\r\nexport const setPreferredChannel = async channelId => {\r\n  try {\r\n    const result = await API.pushToDB(\r\n      '/Channel',\r\n      'preferredChannel',\r\n      channelId\r\n    );\r\n    return { ...result, msg: 'Channel preference set' };\r\n  } catch (error) {\r\n    console.log(error);\r\n    return { status: false, msg: 'Something went wrong' };\r\n  }\r\n};\r\n"]}