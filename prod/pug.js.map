{"version":3,"sources":["../src/pug.js"],"names":["addGameType","Pugs","_","gameName","noPlayers","noTeams","uid","isNaN","status","msg","discriminator","toLowerCase","pickingOrder","parseInt","newGameType","API","pushToDB","result","console","log","delGameType","args","deleteFromDB","joinGameType","user","PugList","length","isPartOfFilledPug","some","p","picking","list","u","id","map","game","g","joinStatus","pugProps","pug","Pug","addPlayer","cleanup","activeCount","error","leaveGameType","action","playerIndex","findPlayer","removePlayer","listAvailablePugs","forGame","withList","pickPugPlayer","filter","captain","team","turn","activePug","captains","res","pickPlayer","picked","captainTimer","setTimeout","present","i","pIndex","push","pugEventEmitter","emit","pugEvents","captainsReady","forEach","pick","findIndex","fillPug","index","splice","stopPug","pickedPlayers","player","lastPlayerIndex","lastPlayerTeam","finished","clearTimeout"],"mappings":"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","file":"pug.js","sourcesContent":["import API from './api';\nimport { getPickingOrder } from './helpers';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { getRandomInt } from './util';\nimport { pugEvents } from './constants';\nimport pugEventEmitter from './pugEvent';\n\nexport const addGameType = async (\n  [_, gameName, noPlayers, noTeams, uid],\n  Pugs\n) => {\n  try {\n    if (isNaN(noPlayers) || isNaN(noTeams) || !gameName || !uid)\n      return { status: false, msg: 'Invalid command' };\n\n    const discriminator = uid.toLowerCase();\n    if (Pugs[discriminator])\n      return { status: false, msg: 'Gametype already exists' };\n\n    const pickingOrder = getPickingOrder(\n      parseInt(noPlayers),\n      parseInt(noTeams)\n    );\n\n    if (!pickingOrder)\n      return { status: false, msg: 'Invalid No. of players/teams' };\n\n    const newGameType = {\n      gameName,\n      pickingOrder,\n      discriminator,\n      noPlayers: parseInt(noPlayers),\n      noTeams: parseInt(noTeams),\n    };\n\n    const result = await API.pushToDB('/Pugs', discriminator, newGameType);\n    return { ...result, msg: 'Gametype added' };\n  } catch (error) {\n    console.log(error);\n    return { status: false, msg: 'Something went wrong' };\n  }\n};\n\nexport const delGameType = async ([_, discriminator, ...args], Pugs) => {\n  //TODO: To remove existing references of this game type(?)\n  try {\n    if (!Pugs[discriminator])\n      return { status: false, msg: \"Gametype doesn't exist\" };\n\n    const result = await API.deleteFromDB('/Pugs', discriminator);\n    return { ...result, msg: 'Gametype removed' };\n  } catch (error) {\n    console.log(error);\n    return { status: false, msg: 'Something went wrong' };\n  }\n};\n\nexport const joinGameType = ([_, ...args], user, Pugs, PugList) => {\n  try {\n    if (args.length === 0)\n      return { status: false, result: [], msg: 'Invalid command' };\n\n    const isPartOfFilledPug = Object.values(PugList).some(\n      p => p.picking && p.list.some(u => u.id === user.id)\n    );\n\n    if (isPartOfFilledPug)\n      return {\n        status: false,\n        result: [],\n        msg: 'Cannot join another pug when you are a part of a filled pug',\n      };\n\n    const result = args.map(g => {\n      const game = g.toLowerCase(); // game is basically the discriminator\n\n      if (!Pugs[game]) return { user, discriminator: game, joinStatus: -1 };\n\n      const pugProps = Pugs[game];\n      const pug = !PugList[game] ? new Pug(pugProps) : cloneDeep(PugList[game]);\n      const joinStatus = pug.addPlayer(user);\n\n      PugList[game] && PugList[game].cleanup(); // because we have cloned p and will no longer be using it\n      return {\n        pug,\n        user,\n        discriminator: pug.discriminator,\n        noPlayers: pug.noPlayers,\n        activeCount: pug.list.length,\n        joinStatus,\n      };\n    });\n    return { status: true, result };\n  } catch (error) {\n    console.log(error);\n    return { status: false, msg: 'Something went wrong' };\n  }\n};\n\nexport const leaveGameType = ([action, ...args], user, Pugs, PugList) => {\n  try {\n    if (action === 'lva') {\n      const result = Object.values(PugList).map(p => {\n        const pug = cloneDeep(p);\n        const playerIndex = pug.findPlayer(user);\n        if (playerIndex > -1) {\n          pug.removePlayer(playerIndex);\n\n          p.cleanup(); // because we have cloned p and will no longer be using it\n          return { pug, user, discriminator: pug.discriminator };\n        }\n        return {};\n      });\n      return { status: true, result };\n    } else {\n      if (args.length === 0)\n        return { status: false, result: [], msg: 'Invalid command' };\n\n      const result = args.map(g => {\n        const game = g.toLowerCase(); // game is basically the discriminator\n\n        if (!Pugs[game]) return {};\n        const pug = PugList[game] ? cloneDeep(PugList[game]) : null;\n        if (!pug) return {};\n\n        const playerIndex = pug.findPlayer(user);\n        if (playerIndex > -1) {\n          pug.removePlayer(playerIndex);\n\n          PugList[game] && PugList[game].cleanup(); // because we have cloned p and will no longer be using it\n          return { pug, user, discriminator: pug.discriminator };\n        }\n        return {};\n      });\n      return { status: true, result };\n    }\n  } catch (error) {\n    console.log(error);\n    return { status: false, msg: 'Something went wrong' };\n  }\n};\n\n// TODO: Use constants for commands for better DX and maybe separate them in methods\nexport const listAvailablePugs = ([action, forGame, ...args], PugList) => {\n  try {\n    if (action === 'lsa') {\n      const result = Object.values(PugList).map(p => ({\n        discriminator: p.discriminator,\n        noPlayers: p.noPlayers,\n        list: [...p.list],\n        picking: p.picking,\n        withList: true,\n      }));\n      return { status: true, result };\n    } else {\n      if (!forGame) {\n        const result = Object.values(PugList).map(p => ({\n          discriminator: p.discriminator,\n          noPlayers: p.noPlayers,\n          list: [...p.list],\n          picking: p.picking,\n          withList: false,\n        }));\n        return { status: true, result };\n      }\n\n      const game = forGame.toLowerCase(); // game is basically the discriminator\n      if (!PugList[game]) return null;\n      const pug = PugList[game];\n      const result = [\n        {\n          discriminator: pug.discriminator,\n          noPlayers: pug.noPlayers,\n          list: [...pug.list],\n          picking: pug.picking,\n          withList: true,\n        },\n      ];\n      return { status: true, result };\n    }\n  } catch (error) {\n    console.log(error);\n    return { status: false, msg: 'Something went wrong' };\n  }\n};\n\nexport const pickPugPlayer = ([_, playerIndex], user, PugList) => {\n  if (!playerIndex) return;\n  const [activePug] = Object.values(PugList).filter(\n    p =>\n      p.picking &&\n      p.list.some(\n        u =>\n          u.id === user.id &&\n          u.captain !== null &&\n          u.team === p.pickingOrder[p.turn]\n      )\n  );\n\n  if (!activePug) return { status: false, msg: `Invalid` };\n  if (activePug.captains.length !== activePug.noTeams)\n    return { status: false, msg: `Please wait for all captains to be picked` };\n  if (playerIndex < 1 || playerIndex > activePug.list.length)\n    return { status: false, msg: `Invalid pick` };\n\n  const pug = cloneDeep(activePug);\n  const res = pug.pickPlayer(playerIndex - 1, pug.pickingOrder[pug.turn]);\n  const result = { pug, ...res };\n  return { status: result.picked, result };\n};\n\nexport class Pug {\n  constructor({ discriminator, gameName, noPlayers, noTeams, pickingOrder }) {\n    this.discriminator = discriminator;\n    this.gameName = gameName;\n    this.noPlayers = noPlayers;\n    this.noTeams = noTeams;\n    this.pickingOrder = pickingOrder;\n    this.turn = 0;\n    this.picking = false;\n    this.list = [];\n    this.captains = [];\n    this.captainTimer = null;\n  }\n\n  fillPug() {\n    this.picking = true;\n    this.captainTimer = setTimeout(() => {\n      const present = this.captains.length;\n      for (let i = 0; i < this.noTeams - present; i++) {\n        while (1) {\n          const pIndex = getRandomInt(0, this.noPlayers - 1);\n          if (this.list[pIndex]['captain'] === null) {\n            this.list[pIndex]['captain'] = this.list[pIndex]['team'] = i;\n            this.list[pIndex]['pick'] = 0;\n            this.captains.push(this.list[pIndex]);\n            break;\n          }\n        }\n      }\n      pugEventEmitter.emit(pugEvents.captainsReady, this.discriminator);\n    }, 5000);\n  }\n\n  stopPug() {\n    this.picking = false;\n    this.turn = 0;\n    this.list.forEach(user => (user.captain = user.team = user.pick = null));\n    this.cleanup();\n  }\n\n  addPlayer(user) {\n    if (!this.picking) {\n      if (this.list.findIndex(u => u.id === user.id) > -1) return 2;\n      this.list.push({ team: null, captain: null, pick: null, ...user });\n      this.list.length === this.noPlayers ? this.fillPug() : null;\n      return 1;\n    }\n    return 0;\n  }\n\n  removePlayer(index) {\n    this.list.splice(index, 1);\n    if (this.picking) this.stopPug();\n  }\n\n  pickPlayer(pIndex, team) {\n    if (this.list[pIndex]['team'] === null) {\n      this.list[pIndex]['team'] = team;\n      this.turn += 1;\n      this.list[pIndex]['pick'] = this.turn;\n\n      const pickedPlayers = [{ player: this.list[pIndex], team }];\n      // last pick automatically goes\n      if (this.turn === this.pickingOrder.length - 1) {\n        const lastPlayerIndex = this.list.findIndex(u => u.team === null);\n        const lastPlayerTeam = this.pickingOrder[this.turn];\n\n        this.list[lastPlayerIndex]['team'] = lastPlayerTeam;\n        this.turn += 1;\n        this.list[lastPlayerIndex]['pick'] = this.turn;\n        // pug ended\n        this.picking = false;\n        pickedPlayers.push({\n          player: this.list[lastPlayerIndex],\n          team: lastPlayerTeam,\n        });\n      }\n      return { picked: true, pickedPlayers, picking: this.picking };\n    }\n    return {\n      picked: false,\n      pickedPlayers: this.list[pIndex],\n      finished: this.picking,\n    };\n  }\n\n  findPlayer(user) {\n    return this.list.findIndex(u => u.id === user.id);\n  }\n\n  cleanup() {\n    this.picking = false;\n    clearTimeout(this.captainTimer);\n  }\n}\n"]}