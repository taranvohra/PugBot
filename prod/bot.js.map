{"version":3,"sources":["../src/bot.js"],"names":["dotenv","config","cachedDB","PugList","disabledEvents","bot","Client","on","console","log","message","author","equals","user","content","startsWith","prefix","Servers","serversObj","Pugs","id","username","args","substring","length","split","action","toLowerCase","roles","member","commands","servers","includes","addqueryserver","delqueryserver","queryut99server","addgametype","delgametype","joingametype","leavegametype","listgametype","channel","send","catch","error","result","status","updateCache","cache","msg","filledPugs","reduce","acc","pug","discriminator","revisePugList","list","parseInt","noPlayers","push","deadPugs","API","getCopyOfDB","login","process","env","DISCORD_BOT_TOKEN","toUpdate","newCache"],"mappings":"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","file":"bot.js","sourcesContent":["import { Client } from 'discord.js';\nimport dotenv from 'dotenv';\nimport { prefix, commands } from './constants';\nimport { addQueryServer, queryUT99Server, delQueryServer } from './ut99query';\nimport {\n  addGameType,\n  delGameType,\n  joinGameType,\n  leaveGameType,\n  listAvailablePugs,\n} from './pug';\nimport {\n  printServerStatus,\n  printServerList,\n  printPugJoinStatus,\n  printPugLeaveStatus,\n  printPugStatuses,\n  broadCastFilledPugs,\n  broadCastDeadPugs,\n} from './formats';\nimport { checkIfRoleIsPrivileged, fixSpecialCharactersInName } from './helpers';\nimport { createSortedArrayFromObject } from './util';\nimport API from './api';\n\ndotenv.config();\n\n/**\n * PugList is list of pugs active at any moment on the server\n * Pugs are the pug(s)/gametype(s) registered on the server with their props\n */\n\nlet cachedDB = {};\nlet PugList = {};\n\nconst disabledEvents = ['TYPING_START', 'CHANNEL_UPDATE', 'USER_UPDATE'];\nconst bot = new Client({ disabledEvents });\n\nbot.on('ready', () => {\n  console.log('ready');\n});\n\nbot.on('message', async message => {\n  if (message.author.equals(bot.user)) return;\n  if (!message.content.startsWith(prefix)) return;\n\n  const { Servers: serversObj = {}, Pugs = {} } = cachedDB;\n  const user = {\n    id: message.author.id,\n    username: fixSpecialCharactersInName(message.author.username),\n  };\n\n  const args = message.content.substring(prefix.length).split(' ');\n  const action = args[0].toLowerCase();\n  const roles = message.member.roles;\n\n  switch (true) {\n    case commands.servers.includes(action): {\n      const Servers = createSortedArrayFromObject(serversObj, 'timestamp');\n      message.channel\n        .send(printServerList(Servers))\n        .catch(console.error + ':list:');\n      break;\n    }\n\n    case checkIfRoleIsPrivileged(roles) &&\n      commands.addqueryserver.includes(action): {\n      const Servers = createSortedArrayFromObject(serversObj);\n      const result = await addQueryServer(args, Servers);\n      result.status ? updateCache('Servers', result.cache) : '';\n      message.channel.send(result.msg);\n      break;\n    }\n\n    case checkIfRoleIsPrivileged(roles) &&\n      commands.delqueryserver.includes(action): {\n      const Servers = createSortedArrayFromObject(serversObj);\n      const result = await delQueryServer(args, Servers);\n      result.status ? updateCache('Servers', result.cache) : '';\n      message.channel.send(result.msg);\n      break;\n    }\n\n    case commands.queryut99server.includes(action): {\n      const Servers = createSortedArrayFromObject(serversObj, 'timestamp');\n      const result = await queryUT99Server(args[1], Servers);\n      message.channel\n        .send(result.status ? printServerStatus(result) : result.msg)\n        .catch(console.error + ':query:');\n      break;\n    }\n\n    case commands.addgametype.includes(action): {\n      const result = await addGameType(args, Pugs);\n      result.status ? updateCache('Pugs', result.cache) : '';\n      message.channel.send(result.msg);\n      break;\n    }\n\n    case commands.delgametype.includes(action): {\n      const result = await delGameType(args, Pugs);\n      result.status ? updateCache('Pugs', result.cache) : '';\n      message.channel.send(result.msg);\n      break;\n    }\n\n    case commands.joingametype.includes(action): {\n      const { status, result, msg } = joinGameType(args, user, Pugs, PugList);\n      const filledPugs = result.reduce((acc, { pug, discriminator }) => {\n        if (pug) {\n          revisePugList(discriminator, pug, 'update');\n          pug.list.length === parseInt(pug.noPlayers) ? acc.push(pug) : null;\n        }\n        return acc;\n      }, []);\n      message.channel\n        .send(status ? printPugJoinStatus(result) : msg)\n        .catch(console.error + ':join:');\n      filledPugs.length > 0\n        ? message.channel.send(broadCastFilledPugs(filledPugs))\n        : null;\n      break;\n    }\n\n    case commands.leavegametype.includes(action): {\n      const { status, result, msg } = leaveGameType(args, user, Pugs, PugList);\n      const deadPugs = result.reduce((acc, { pug, discriminator }) => {\n        if (pug) {\n          revisePugList(\n            discriminator,\n            pug,\n            pug.list.length === 0 ? 'remove' : 'update'\n          );\n          pug.list.length === parseInt(pug.noPlayers) - 1\n            ? acc.push({ ...pug, user })\n            : null;\n        }\n        return acc;\n      }, []);\n      message.channel\n        .send(status ? printPugLeaveStatus(result) : msg)\n        .catch(console.error + ':leave:');\n      deadPugs.length > 0\n        ? message.channel.send(broadCastDeadPugs(deadPugs))\n        : null;\n      break;\n    }\n\n    case commands.listgametype.includes(action): {\n      const { status, result, msg } = listAvailablePugs(args, PugList);\n      message.channel\n        .send(status ? printPugStatuses(result) : msg)\n        .catch(console.error + ':list:');\n      break;\n    }\n    default:\n      console.log('no match');\n  }\n});\n\n(async () => {\n  cachedDB = await API.getCopyOfDB(`/`);\n  bot.login(process.env.DISCORD_BOT_TOKEN);\n})();\n\nconst updateCache = (toUpdate, newCache) => (cachedDB[toUpdate] = newCache);\n\nconst revisePugList = (discriminator, pug, action) => {\n  if (action === 'update') PugList[discriminator] = pug;\n  else if (action === 'remove' && PugList[discriminator])\n    delete PugList[discriminator];\n};\n"]}