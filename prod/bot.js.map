{"version":3,"sources":["../src/bot.js"],"names":["dotenv","config","cachedDB","PugList","disabledEvents","bot","Client","on","console","log","message","author","equals","user","content","startsWith","prefix","Servers","serversObj","Pugs","id","username","args","substring","length","split","action","toLowerCase","roles","member","commands","setchannel","includes","servers","addqueryserver","delqueryserver","queryut99server","addgametype","delgametype","joingametype","leavegametype","listgametype","channelId","channel","result","status","updateCache","cache","send","msg","catch","error","filledPugs","reduce","acc","pug","discriminator","revisePugList","list","parseInt","noPlayers","push","forBroadcast","map","forEach","ap","deadPugs","API","getCopyOfDB","login","process","env","DISCORD_BOT_TOKEN","toUpdate","newCache","pugEventEmitter","pugEvents","captainsReady","Channel","channels","get","preferredChannel"],"mappings":"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","file":"bot.js","sourcesContent":["import { Client } from 'discord.js';\nimport dotenv from 'dotenv';\nimport pugEventEmitter from './pugEvent';\nimport { prefix, commands, pugEvents } from './constants';\nimport {\n  addQueryServer,\n  queryUT99Server,\n  delQueryServer,\n  setPreferredChannel,\n} from './ut99query';\nimport {\n  addGameType,\n  delGameType,\n  joinGameType,\n  leaveGameType,\n  listAvailablePugs,\n} from './pug';\nimport {\n  printServerStatus,\n  printServerList,\n  printPugJoinStatus,\n  printPugLeaveStatus,\n  printPugStatuses,\n  broadCastFilledPugs,\n  broadCastDeadPugs,\n  broadCastCaptainsReady,\n} from './formats';\nimport { checkIfRoleIsPrivileged, fixSpecialCharactersInName } from './helpers';\nimport { createSortedArrayFromObject } from './util';\nimport API from './api';\n\ndotenv.config();\n\n/**\n * PugList is list of pugs active at any moment on the server\n * Pugs are the pug(s)/gametype(s) registered on the server with their props\n */\n\nlet cachedDB = {};\nlet PugList = {};\n\nconst disabledEvents = ['TYPING_START', 'CHANNEL_UPDATE', 'USER_UPDATE'];\nconst bot = new Client({ disabledEvents });\n\nbot.on('ready', () => {\n  console.log('ready');\n});\n\nbot.on('message', async message => {\n  if (message.author.equals(bot.user)) return;\n  if (!message.content.startsWith(prefix)) return;\n\n  const { Servers: serversObj = {}, Pugs = {} } = cachedDB;\n  const user = {\n    id: message.author.id,\n    username: fixSpecialCharactersInName(message.author.username),\n  };\n\n  const args = message.content.substring(prefix.length).split(' ');\n  const action = args[0].toLowerCase();\n  const roles = message.member.roles;\n\n  switch (true) {\n    case checkIfRoleIsPrivileged(roles) &&\n      commands.setchannel.includes(action): {\n      const channelId = message.channel.id;\n      const result = await setPreferredChannel(channelId);\n      result.status ? updateCache('Servers', result.cache) : '';\n      message.channel.send(result.msg);\n      break;\n    }\n\n    case commands.servers.includes(action): {\n      const Servers = createSortedArrayFromObject(serversObj, 'timestamp');\n      message.channel\n        .send(printServerList(Servers))\n        .catch(console.error + ':list:');\n      break;\n    }\n\n    case checkIfRoleIsPrivileged(roles) &&\n      commands.addqueryserver.includes(action): {\n      const Servers = createSortedArrayFromObject(serversObj);\n      const result = await addQueryServer(args, Servers);\n      result.status ? updateCache('Servers', result.cache) : '';\n      message.channel.send(result.msg);\n      break;\n    }\n\n    case checkIfRoleIsPrivileged(roles) &&\n      commands.delqueryserver.includes(action): {\n      const Servers = createSortedArrayFromObject(serversObj);\n      const result = await delQueryServer(args, Servers);\n      result.status ? updateCache('Servers', result.cache) : '';\n      message.channel.send(result.msg);\n      break;\n    }\n\n    case commands.queryut99server.includes(action): {\n      const Servers = createSortedArrayFromObject(serversObj, 'timestamp');\n      const result = await queryUT99Server(args[1], Servers);\n      message.channel\n        .send(result.status ? printServerStatus(result) : result.msg)\n        .catch(console.error + ':query:');\n      break;\n    }\n\n    case commands.addgametype.includes(action): {\n      const result = await addGameType(args, Pugs);\n      result.status ? updateCache('Pugs', result.cache) : '';\n      message.channel.send(result.msg);\n      break;\n    }\n\n    case commands.delgametype.includes(action): {\n      const result = await delGameType(args, Pugs);\n      result.status ? updateCache('Pugs', result.cache) : '';\n      message.channel.send(result.msg);\n      break;\n    }\n\n    case commands.joingametype.includes(action): {\n      const { status, result, msg } = joinGameType(args, user, Pugs, PugList);\n      const filledPugs = result.reduce((acc, { pug, discriminator }) => {\n        if (pug) {\n          revisePugList(discriminator, pug, 'update');\n          pug.list.length === parseInt(pug.noPlayers) ? acc.push(pug) : null;\n        }\n        return acc;\n      }, []);\n      message.channel\n        .send(status ? printPugJoinStatus(result) : msg)\n        .catch(console.error + ':join:');\n\n      const forBroadcast = filledPugs.map(pug => {\n        if (pug.list.length === pug.noPlayers) {\n          Object.values(PugList).forEach(ap => {\n            if (pug.discriminator !== ap.discriminator)\n              pug.list.forEach(user => {\n                const { result } = leaveGameType(\n                  ['l', ap.discriminator],\n                  user,\n                  Pugs,\n                  PugList\n                );\n                if (result[0].pug) {\n                  revisePugList(\n                    ap.discriminator,\n                    result[0].pug,\n                    result[0].pug.list.length === 0 ? 'remove' : 'update'\n                  );\n                  message.channel.send(printPugLeaveStatus(result));\n                }\n              });\n          });\n          return pug;\n        }\n      });\n      forBroadcast.length > 0\n        ? message.channel.send(broadCastFilledPugs(forBroadcast))\n        : null;\n      break;\n    }\n\n    case commands.leavegametype.includes(action): {\n      const { status, result, msg } = leaveGameType(args, user, Pugs, PugList);\n      const deadPugs = result.reduce((acc, { pug, discriminator }) => {\n        if (pug) {\n          revisePugList(\n            discriminator,\n            pug,\n            pug.list.length === 0 ? 'remove' : 'update'\n          );\n          pug.list.length === parseInt(pug.noPlayers) - 1\n            ? acc.push({ ...pug, user })\n            : null;\n        }\n        return acc;\n      }, []);\n      message.channel\n        .send(status ? printPugLeaveStatus(result) : msg)\n        .catch(console.error + ':leave:');\n      deadPugs.length > 0\n        ? message.channel.send(broadCastDeadPugs(deadPugs))\n        : null;\n      break;\n    }\n\n    case commands.listgametype.includes(action): {\n      const { status, result, msg } = listAvailablePugs(args, PugList);\n      message.channel\n        .send(status ? printPugStatuses(result) : msg)\n        .catch(console.error + ':list:');\n      break;\n    }\n    default:\n      console.log('no match');\n  }\n});\n\n(async () => {\n  cachedDB = await API.getCopyOfDB(`/`);\n  bot.login(process.env.DISCORD_BOT_TOKEN);\n})();\n\nconst updateCache = (toUpdate, newCache) => (cachedDB[toUpdate] = newCache);\n\nconst revisePugList = (discriminator, pug, action) => {\n  if (action === 'update') PugList[discriminator] = pug;\n  else if (action === 'remove' && PugList[discriminator])\n    delete PugList[discriminator];\n};\n\n/*\n  Events emitted for pugs\n*/\n\npugEventEmitter.on(pugEvents.captainsReady, discriminator => {\n  const { Channel = {} } = cachedDB;\n  const pug = PugList[discriminator];\n  bot.channels\n    .get(Channel.preferredChannel)\n    .send(broadCastCaptainsReady(pug))\n    .catch(console.error + ':broadCastCaptains:');\n});\n"]}